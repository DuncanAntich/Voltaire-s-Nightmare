#AVIALABLE CUSTOM LOCALISATION KEYS
#When adding new custom loc keys, add them to the appropriate category (or add a new one) and describe them. Name the strings "String_X" where x is its content.
# To not display anything, you can use 'localisation_key = ""'
# Please add one example sentence for each key.

#As this list grow organize with categories.
#Current loc keys in this file:



################################
###   Rulers // Dirigeants   ###
################################
# Ex: "So [he/she] tried" => "Aussi a-t-[il/elle] tenté de"
defined_text = {
	name = GetIlElleDir
	text = {
		localisation_key = string_il_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[He/She] tried" => "[Il/Elle] a tenté de"
defined_text = {
	name = GetIlElleDirCap
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[he/she] (the ruler's next spouse)" => "[il/elle] (= la future du dirigeant/le futur de la dirigeante)"
# Used to define a character the opposite gender of the ruler
defined_text = {
	name = GetAntiIlElleDir
	text = {
		localisation_key = string_elle_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_il_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[He/She] (= the ruler's next spouse)" => "[Il/Elle] (= la future du dirigeant/le futur de la dirigeante)"
# Used to define a character the opposite gender of the ruler
defined_text = {
	name = GetAntiIlElleDirCap
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "As for [him/her]" => "Quant à [lui/elle]"
defined_text = {
	name = GetLuiElleDir
	text = {
		localisation_key = string_lui_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[Him/Her] is..." => "[Lui/Elle] est..."
defined_text = {
	name = GetLuiElleDirCap
	text = {
		localisation_key = string_lui_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "That [him/her]" => "[que lui/qu'elle]" (lower case / minscule)
defined_text = {
	name = GetQueluiQuelleDir
	text = {
		localisation_key = string_quelui_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_quelle_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "That [him/her]" => "[Que lui/Qu'elle]" (upper case / majuscule)
defined_text = {
	name = GetQueluiQuelleDirCap
	text = {
		localisation_key = string_quelui_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_quelle_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "He saw [him/her]" => "Il [le/la] vit"
defined_text = {
	name = GetLeLaFDir
	text = {
		localisation_key = string_le_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "Firing [him/her] would have been..." => "[Le/La] renvoyer aurait été..."
defined_text = {
	name = GetLeLaFDirCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[the] nearest consort of the Sultan" => "La consort [la] plus proche du sultan/Le consort [le] plus proche de la sultane"
# Used to define a character the opposite gender of the ruler
defined_text = {
	name = GetAntiLeLaFDir
	text = {
		localisation_key = string_la_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_le_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[The] nearest consort of the Sultan" => "[La] plus proche consort du sultan/[Le] plus proche consort de la sultane"
# Used to define a character the opposite gender of the ruler
defined_text = {
	name = GetAntiLeLaFDirCap
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


### le/la/l' ###
# Ex: "the monarch" => "[le/la] monarque"
defined_text = {
	name = GetLeLaLDir
	text = {
		localisation_key = string_le_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[The] monarch" => [Le/La] monarque"
defined_text = {
	name = GetLeLaLDirCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[this] monarch" => "[ce/cette] monarque"
defined_text = {
	name = GetCeCetteDir
	text = {
		localisation_key = string_ce_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[This] monarch" => "[Ce/Cette] monarque"
defined_text = {
	name = GetCeCetteDirCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


################################################################################################################
###   Mandatory use of some masculine forms in some contexts / Emploi forcé de certaines formes masculines   ###
################################################################################################################

# Ex: "[this] monarch" => "[ce/cette] monarque" (lower case/minuscule)
# Mandatory use of masculine form "ce" for some situations / Emploi forcé de la forme masculine "ce" dans certains contextes
defined_text = {
	name = GetCeCetteFDir
	text = {
		localisation_key = string_ce_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[This] monarch" => "[Cet/Cette] monarque" (upper case/majuscule)
# Mandatory use of masculine form "Ce" for some situations / Emploi forcé de la forme masculine "Ce" dans certains contextes
defined_text = {
	name = GetCeCetteFDirCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[this] (wo)man" => "[cet/cette] homme/femme" (lower case/minuscule)
# Mandatory use of masculine form "cet" for some situations / Emploi forcé de la forme masculine "cet" dans certains contextes
defined_text = {
	name = GetCetCetteFDir
	text = {
		localisation_key = string_cet_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[This] (wo)man" => "[Cet/Cette] homme/femme" (upper case/majuscule)
# Mandatory use of masculine form "Cet" for some situations / Emploi forcé de la forme masculine "Cet" dans certains contextes
defined_text = {
	name = GetCetCetteFDirCap
	text = {
		localisation_key = string_cet_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[his] sovereign" => "s[on/a] monarque"
defined_text = {
	name = GetOnADir
	text = {
		localisation_key = string_on_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[his] sovereign" => "s[on] souverain/s[a] souveraine"
defined_text = {
	name = GetOnAFDir
	text = {
		localisation_key = string_on_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[the one] which" => "[celui/celle] qui"
defined_text = {
	name = GetCeluiCelleDir
	text = {
		localisation_key = string_celui_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_celle_FR
		trigger = {
			is_female = yes
		}
	}
}

# Ex: "[The one] which" => "[Celui/Celle] qui"
defined_text = {
	name = GetCeluiCelleDirCap
	text = {
		localisation_key = string_celui_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_celle_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[of the] monarch" => "[du/de la] monarque"
defined_text = {
	name = GetDuDelaDir
	text = {
		localisation_key = string_du_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[Of the] monarch" => "[Du/De la] monarque"
defined_text = {
	name = GetDuDelaDirCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[of the] new monarch" => "[du] nouveau monarque/de la] nouvelle monarque"
defined_text = {
	name = GetDuDelaFDir
	text = {
		localisation_key = string_du_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[Of the] new monarch" => "[Du] nouveau monarque/[De la] nouvelle monarque"
defined_text = {
	name = GetDuDelaFDirCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[To the] monarch" => "[au/à la] monarque" (lower case/minuscule)
defined_text = {
	name = GetAuAlaDir
	text = {
		localisation_key = string_au_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[To the] monarch" => "[Au/À la] monarque" (upper case/majuscule)
defined_text = {
	name = GetAuAlaDirCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[To the] monarch" => "[au/à la] monarque" (lower case/minuscule)
defined_text = {
	name = GetAuAlaFDir
	text = {
		localisation_key = string_au_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[To the] monarch" => "[Au/À la] monarque" (upper case/majuscule)
defined_text = {
	name = GetAuAlaFDirCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[if] he/she" => "[s'il]/[si elle]" (lower case/minuscule)
defined_text = {
	name = GetSilSielleDir
	text = {
		localisation_key = string_sil_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_sielle_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[If] he/she" => "[S'il]/[Si elle]" (upper case/majuscule)
defined_text = {
	name = GetSilSielleDirCap
	text = {
		localisation_key = string_sil_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_sielle_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "great ruler" => "grand[ø/e] dirigeant[ø/e]"
defined_text = {
	name = GetXEDir
	text = {
		localisation_key = string_X_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_e_FR
		trigger = {
			is_female = yes
		}
	}
}

# Ex: "The ruler married a great [lord/lady]" => "Le dirigeant a épousé un[e] grand[e] dame/La dirigeant a épousé un[ø] grand[ø] seigneur"
# Used to define a character the opposite gender of the ruler
defined_text = {
	name = GetAntiXEDir
	text = {
		localisation_key = string_e_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_X_FR
		trigger = {
			is_female = yes
		}
	}
}

# Ex: "first" => "premi[er]/premi[ère]"
defined_text = {
	name = GetErEreDir
	text = {
		localisation_key = string_er_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_ere_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[new] ruler" => "nouv[eau/elle] monarque"
defined_text = {
	name = GetEauElleDir
	text = {
		localisation_key = string_eau_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "The ruler will take a [spouse]" => "Le dirigeant va prendre une [épouse]/La dirigeante va prendre un [époux/épouse]"
# Defines a character the opposite gender of the ruler / Utilisé pour définir un personnage de sexe opposé à celui du dirigeant ou de la dirigeante
defined_text = {
	name = GetAntiEpouxEpouseDir
	text = {
		localisation_key = string_epouse_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_epoux_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "The ruler will marry the [daughter/son] of a noble family" => "Le dirigeant va épouser la [fille] d'une grande famille/La dirigeante va épouser le [fils] d'une grande famille"
# Defines a character the opposite gender of the ruler / Utilisé pour définir un personnage de sexe opposé à celui du dirigeant ou de la dirigeante
 defined_text = {
	name = GetAntiFilsFilleDir
	text = {
		localisation_key = string_fille_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_fils_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "The ruler marries his [brother/sister]" => "Le dirigeant épouse sa [soeur]/La dirigeante épouse son [frère]"
# Defines a character the opposite gender of the ruler / Utilisé pour définir un personnage de sexe opposé à celui du dirigeant ou de la dirigeante
defined_text = {
	name = GetAntiFrereSoeurDir
	text = {
		localisation_key = string_soeur_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_frere_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "[from him/her]" => "[de lui/d'elle]" (lower case / minuscule)
defined_text = {
	name = GetDeluiDelleDir
	text = {
		localisation_key = string_delui_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_delle_FR
		trigger = {
			is_female = yes
		}
	}
}
# Ex: "[From him/her]" => "[De lui/D'elle]" (upper case / majuscule)
defined_text = {
	name = GetDeluiDelleDirCap
	text = {
		localisation_key = string_delui_cap_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_delle_cap_FR
		trigger = {
			is_female = yes
		}
	}
}


# Ex: "the [Elector] of Bavaria" => "l'Élec[teur/trice] de Bavière"
defined_text = {
	name = GetTeurTriceDir
	text = {
		localisation_key = string_teur_FR
		trigger = {
			is_female = no
		}
	}
	text = {
		localisation_key = string_trice_FR
		trigger = {
			is_female = yes
		}
	}
}

##############################
###   Heirs // Héritiers   ###
##############################
# Ex: "So [he/she] tried" => "Aussi a-t-[il/elle] tenté de"
defined_text = {
	name = GetIlElleHrt
	text = {
		localisation_key = string_il_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[He/She] tried" => "[Il/Elle] a tenté de"
defined_text = {
	name = GetIlElleHrtCap
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[he/she] (= the heir's next spouse)" => "[il/elle] (= la future de l'héritier/le futur de l'héritière)"
# Used to define a character the opposite gender of the heir
defined_text = {
	name = GetAntiIlElleHrt
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_il_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[He/She] (= the heir's next spouse)" => "[Il/Elle] (= la future de l'héritier/le future de l'héritière)"
# Used to define a character the opposite gender of the heir
defined_text = {
	name = GetAntiIlElleHrtCap
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "As for [him/her]" => "Quant à [lui/elle]"
defined_text = {
	name = GetLuiElleHrt
	text = {
		localisation_key = string_lui_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[Him/Her] is..." => "[Lui/Elle] est..."
defined_text = {
	name = GetLuiElleHrtCap
	text = {
		localisation_key = string_lui_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "That [him/her]" => "[que lui/qu'elle]" (lower case / minscule)
defined_text = {
	name = GetQueluiQuelleHrt
	text = {
		localisation_key = string_quelui_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_quelle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "That [him/her]" => "[Que lui/Qu'elle]" (upper case / majuscule)
defined_text = {
	name = GetQueluiQuelleHrtCap
	text = {
		localisation_key = string_quelui_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_quelle_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "He saw [him/her]" => "Il [le/la] vit"
defined_text = {
	name = GetLeLaFHrt
	text = {
		localisation_key = string_le_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "Firing [him/her] would have been..." => "[Le/La] renvoyer aurait été..."
defined_text = {
	name = GetLeLaFHrtCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}

# Ex: "the nearest consort of the Heir" => "La consort [la] plus proche de l'héritier/Le consort [le] plus proche de l'héritière"
# Used to define a character the opposite gender of the ruler
defined_text = {
	name = GetAntiLeLaFHrt
	text = {
		localisation_key = string_la_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_le_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "The nearest consort of the Heir" => "[La] plus proche consort de l'héritier/[Le] plus proche consort de l'héritière"
# Used to define a character the opposite gender of the ruler
defined_text = {
	name = GetAntiLeLaFHrtCap
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


###   le/la/l'   ###

# Ex: "[the] heir" => "[le/la] héritier/ère"
defined_text = {
	name = GetLeLaLHrt
	text = {
		localisation_key = string_le_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[The] heir" => "[Le/La] héritier/ère"
defined_text = {
	name = GetLeLaLHrtCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[this] monarch" => "[ce/cette] héritier/ère"
defined_text = {
	name = GetCeCetteHrt
	text = {
		localisation_key = string_ce_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[This] monarch" => "[Ce/Cette] héritier/ère"
defined_text = {
	name = GetCeCetteHrtCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[this] sick person" => "[ce/cette] malade" (lower case/minuscule)
# Mandatory use of masculine form "ce" for some situations / Emploi forcé de la forme masculine "ce" dans certains contextes
defined_text = {
	name = GetCeCetteFHrt
	text = {
		localisation_key = string_ce_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[This] sick person" => "[Cet/Cette] malade" (upper case/majuscule)
# Mandatory use of masculine form "Ce" for some situations / Emploi forcé de la forme masculine "Ce" dans certains contextes
defined_text = {
	name = GetCeCetteFHrtCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[this] (wo)man" => "[cet/cette] homme/femme" (lower case/minuscule)
# Mandatory use of masculine form "cet" for some situations / Emploi forcé de la forme masculine "cet" dans certains contextes
defined_text = {
	name = GetCetCetteFHrt
	text = {
		localisation_key = string_cet_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[This] (wo)man" => "[Cet/Cette] homme/femme" (upper case/majuscule)
# Mandatory use of masculine form "Cet" for some situations / Emploi forcé de la forme masculine "Cet" dans certains contextes
defined_text = {
	name = GetCetCetteFHrtCap
	text = {
		localisation_key = string_cet_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[his] son/daughter" => "s[on] fils/s[a] fille"
defined_text = {
	name = GetOnAHrt
	text = {
		localisation_key = string_on_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[his] son/daughter" => "s[on] fils/s[a] fille"
defined_text = {
	name = GetOnAFHrt
	text = {
		localisation_key = string_on_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[the one] which" => "[celui/celle] qui"
defined_text = {
	name = GetCeluiCelleHrt
	text = {
		localisation_key = string_celui_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_celle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}

# Ex: "[The one] which" => "[Celui/Celle] qui"
defined_text = {
	name = GetCeluiCelleHrtCap
	text = {
		localisation_key = string_celui_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_celle_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[of the] son/daughter" => "[du/de la] fils/fille"
defined_text = {
	name = GetDuDelaHrt
	text = {
		localisation_key = string_du_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[Of the] son/daughter" => "[Du/De la] fils/fille"
defined_text = {
	name = GetDuDelaHrtCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[of the] last son/daughter" => "[du] dernier fils/[de la] dernière fille"
defined_text = {
	name = GetDuDelaFHrt
	text = {
		localisation_key = string_du_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[Of the] last son/daughter" => "[Du] dernier fils/[De la] dernière fille"
defined_text = {
	name = GetDuDelaFHrtCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[to the] son/daughter" => "[au/à la] fils/fille" (lower case/minuscule)
defined_text = {
	name = GetAuAlaHrt
	text = {
		localisation_key = string_au_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[To the] son/daughter" => "[Au/À la] fils/fille"
defined_text = {
	name = GetAuAlaHrtCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[to the] son/daughter" => "[au/à la] fils/fille" (lower case/minuscule)
defined_text = {
	name = GetAuAlaFHrt
	text = {
		localisation_key = string_au_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[To the] son/daughter" => "[Au/À la] fils/fille"
defined_text = {
	name = GetAuAlaFHrtCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[if] he/she" => "[s'il]/[si elle]" (lower case/minuscule)
defined_text = {
	name = GetSilSielleHrt
	text = {
		localisation_key = string_sil_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_sielle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[If] he/she" => "[S'il]/[Si elle]" (upper case/majuscule)
defined_text = {
	name = GetSilSielleHrtCap
	text = {
		localisation_key = string_sil_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_sielle_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "great ruler" => "prochain[ø/e] souverain[ø/e]"
defined_text = {
	name = GetXEHrt
	text = {
		localisation_key = string_X_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_e_FR
		trigger = {
			has_female_heir = yes
		}
	}
}

# Ex: "The heir married a great [lord/lady]" => "L'héritier a épousé un[e] grand[e] dame/L'héritière a épousé un[ø] grand[ø] seigneur"
# Used to define a character the opposite gender of the Heir
defined_text = {
	name = GetAntiXEHrt
	text = {
		localisation_key = string_e_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_X_FR
		trigger = {
			has_female_heir = yes
		}
	}
}

# Ex: "Heir" => "hériti[er]/hériti[ère]"
defined_text = {
	name = GetErEreHrt
	text = {
		localisation_key = string_er_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_ere_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[new] heir" => "nouv[eau/elle] souverain(e)"
defined_text = {
	name = GetEauElleHrt
	text = {
		localisation_key = string_eau_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "The Heir will take a [wife/husband]" => "L'héritier va prendre un [époux]/L'héritière va prendre une [épouse]"
# Defines a character the opposite gender of the heir / Utilisé pour définir un personnage de sexe opposé à celui de l'héritier ou de l'héritière
defined_text = {
	name = GetAntiEpouxEpouseHrt
	text = {
		localisation_key = string_epouse_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_epoux_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "The Heir will marry the [daughter/son] of a great family" => "L'héritier va épouser la [fille] d'une grande famille/L'héritière va épouser le [fils] d'une grande famille"
# Defines a character the opposite gender of the heir / Utilisé pour définir un personnage de sexe opposé à celui de l'héritier ou de l'héritière
defined_text = {
	name = GetAntiFilsFilleHrt
	text = {
		localisation_key = string_fille_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_fils_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "The heir marries his [brother/sister]" => "L'héritier épouse sa [soeur]/L'héritière épouse son [frère]"
# Defines a character the opposite gender of the heir / Utilisé pour définir un personnage de sexe opposé à celui de l'héritier ou de l'héritière
defined_text = {
	name = GetAntiFrereSoeurHrt
	text = {
		localisation_key = string_soeur_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_frere_FR
		trigger = {
			has_female_heir = yes
		}
	}
}


# Ex: "[from him/her]" => "[de lui/d'elle]" (lower case / minuscule)
defined_text = {
	name = GetDeluiDelleHrt
	text = {
		localisation_key = string_delui_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_delle_FR
		trigger = {
			has_female_heir = yes
		}
	}
}
# Ex: "[From him/her]" => "[De lui/D'elle]" (upper case / majuscule)
defined_text = {
	name = GetDeluiDelleHrtCap
	text = {
		localisation_key = string_delui_cap_FR
		trigger = {
			has_female_heir = no
		}
	}
	text = {
		localisation_key = string_delle_cap_FR
		trigger = {
			has_female_heir = yes
		}
	}
}



################################
###   Consorts // Consorts   ###
################################
# Ex: "So [he/she] tried" => "Aussi a-t-[il/elle] tenté de"
defined_text = {
	name = GetIlElleCons
	text = {
		localisation_key = string_il_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[He/She] tried" => "[Il/Elle] a tenté de"
defined_text = {
	name = GetIlElleConsCap
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[he/she] (= the consort dead spouse)" => "[il/elle] (= feu l'époux/l'épouse du/de la consort)"
# Used to define a character the opposite gender of the consort
defined_text = {
	name = GetAntiIlElleCons
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_il_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[He/She] (= the consort dead spouse)" => "[Il/Elle] (= feu l'époux/l'épouse du/de la consort)"
# Used to define a character the opposite gender of the consort
defined_text = {
	name = GetAntiIlElleConsCap
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "As for [him/her]" => "Quant à [lui/elle]"
defined_text = {
	name = GetLuiElleCons
	text = {
		localisation_key = string_lui_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[Him/Her] is..." => "[Lui/Elle] est..."
defined_text = {
	name = GetLuiElleConsCap
	text = {
		localisation_key = string_lui_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "That [him/her]" => "[que lui/qu'elle]" (lower case / minscule)
defined_text = {
	name = GetQueluiQuelleCons
	text = {
		localisation_key = string_quelui_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_quelle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "That [him/her]" => "[Que lui/Qu'elle]" (upper case / majuscule)
defined_text = {
	name = GetQueluiQuelleConsCap
	text = {
		localisation_key = string_quelui_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_quelle_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "He saw [him/her]" => "Il [le/la] vit"
defined_text = {
	name = GetLeLaFCons
	text = {
		localisation_key = string_le_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "Firing [him/her] would have been..." => "[Le/La] renvoyer aurait été..."
defined_text = {
	name = GetLeLaFConsCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "the consort mourns [him/her] (= the dead ruler)" => "la consort [le] pleure (= feu le dirigeant)/le consort [la] pleure (= feu la dirigeante)"
# Used to define a character the opposite gender of the consort
defined_text = {
	name = GetAntiLeLaFCons
	text = {
		localisation_key = string_la_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_le_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[The] consort's first spouse" => "[Le] premier époux de la consort/[La] première épouse de la consort"
# Used to define a character the opposite gender of the consort
defined_text = {
	name = GetAntiLeLaFConsCap
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


###   le/la/l'   ###

# Ex: "[the] consort" => "[le/la] consort"
defined_text = {
	name = GetLeLaLCons
	text = {
		localisation_key = string_le_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			has_female_consort = yes
		}
	}
	text = { # TEST
		localisation_key = string_l_FR
		trigger = {
			OR = {
				AND = {
					tag = HAB
					government = monarchy
					government_rank = 1
					NOT = { government_rank = 2 }
					has_female_consort = no
				}
				AND = {
					tag = HAB
					government = monarchy
					government_rank = 1
					NOT = { government_rank = 2 }
					has_female_consort = yes
				}
			}
		}
	}
}
# Ex: "[The] consort" => "[Le/La] consort"
defined_text = {
	name = GetLeLaLConsCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[this] consort" => "[ce/cette] consort"
defined_text = {
	name = GetCeCetteCons
	text = {
		localisation_key = string_ce_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[This] consort" => "[Ce/Cette] consort"
defined_text = {
	name = GetCeCetteConsCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[this] consort" => "[ce/cette] consort" (lower case/minuscule)
# Mandatory use of masculine form "ce" for some situations / Emploi forcé de la forme masculine "ce" dans certains contextes
defined_text = {
	name = GetCeCetteFCons
	text = {
		localisation_key = string_ce_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[This] sick person" => "[Cet/Cette] consort" (upper case/majuscule)
# Mandatory use of masculine form "Ce" for some situations / Emploi forcé de la forme masculine "Ce" dans certains contextes
defined_text = {
	name = GetCeCetteFConsCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[this] (wo)man" => "[cet/cette] homme/femme" (lower case/minuscule)
# Mandatory use of masculine form "cet" for some situations / Emploi forcé de la forme masculine "cet" dans certains contextes
defined_text = {
	name = GetCetCetteFCons
	text = {
		localisation_key = string_cet_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[This] (wo)man" => "[Cet/Cette] homme/femme" (upper case/majuscule)
# Mandatory use of masculine form "Cet" for some situations / Emploi forcé de la forme masculine "Cet" dans certains contextes
defined_text = {
	name = GetCetCetteFConsCap
	text = {
		localisation_key = string_cet_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[his] consort" => "s[on]/s[a] consort"
defined_text = {
	name = GetOnACons
	text = {
		localisation_key = string_on_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[his] consort" => "s[on]/s[a] consort"
defined_text = {
	name = GetOnAFCons
	text = {
		localisation_key = string_on_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[the one] which" => "[celui/celle] qui"
defined_text = {
	name = GetCeluiCelleCons
	text = {
		localisation_key = string_celui_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_celle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[The one] which" => "[Celui/Celle] qui"
defined_text = {
	name = GetCeluiCelleConsCap
	text = {
		localisation_key = string_celui_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_celle_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[of the] consort" => "[du/de la] consort"
defined_text = {
	name = GetDuDelaCons
	text = {
		localisation_key = string_du_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[Of the] consort" => "[Du/De la] consort"
defined_text = {
	name = GetDuDelaConsCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[of the] new consort" => "[du] nouveau consort/[de la] nouvelle consort"
defined_text = {
	name = GetDuDelaFCons
	text = {
		localisation_key = string_du_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[Of the] new consort" => "[Du] nouveau consort/[De la] nouvelle consort"
defined_text = {
	name = GetDuDelaFConsCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[to the] consort" => "[au/à la] consort"
defined_text = {
	name = GetAuAlaCons
	text = {
		localisation_key = string_au_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[To the] consort" => "[Au/À la] consort"
defined_text = {
	name = GetAuAlaConsCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[to the] consort" => "[au/à la] consort"
defined_text = {
	name = GetAuAlaFCons
	text = {
		localisation_key = string_au_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[To the] consort" => "[Au/À la] consort"
defined_text = {
	name = GetAuAlaFConsCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[if] he/she" => "[s'il]/[si elle]" (lower case/minuscule)
defined_text = {
	name = GetSilSielleCons
	text = {
		localisation_key = string_sil_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_sielle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[If] he/she" => "[S'il]/[Si elle]" (upper case/majuscule)
defined_text = {
	name = GetSilSielleConsCap
	text = {
		localisation_key = string_sil_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_sielle_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "next regent" => "prochain[ø/e] régent[ø/e]"
defined_text = {
	name = GetXECons
	text = {
		localisation_key = string_X_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_e_FR
		trigger = {
			has_female_consort = yes
		}
	}
}

# Ex: "The Consort is the spouse of a great ruler" => "Le consort est l'époux d'un[e] grand[e] dirigeant[e]/La consort est l'épouse d'un[ø] grand[ø] dirigeant[ø]"
# Used to define a character the opposite gender of the Consort
defined_text = {
	name = GetAntiXECons
	text = {
		localisation_key = string_e_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_X_FR
		trigger = {
			has_female_consort = yes
		}
	}
}

# Ex: "first consort" => "premier[er/ère] consort"
defined_text = {
	name = GetErEreCons
	text = {
		localisation_key = string_er_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_ere_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[new] consort" => "nouv[eau/elle] consort"
defined_text = {
	name = GetEauElleCons
	text = {
		localisation_key = string_eau_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "The Consort's [wife/husband] is the ruler" => "L'[époux] de la consort est le dirigeant/L'[épouse] du consort est la dirigeante"
# Defines a character the opposite gender of the consort / Utilisé pour définir un personnage de sexe opposé à celui du ou de la consort
defined_text = {
	name = GetAntiEpouxEpouseCons
	text = {
		localisation_key = string_epouse_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_epoux_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "The Consort is the [daughter/son] of a great family" => "Le consort est le [fils] d'une grande famille/La consort est la [fille] d'une grande famille"
# Defines a character the opposite gender of the consort / Utilisé pour définir un personnage de sexe opposé à celui du ou de la consort
defined_text = {
	name = GetAntiFilsFilleCons
	text = {
		localisation_key = string_fille_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_fils_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "The consort is the ruler's [brother/sister]" => "La consort est la soeur du dirigeant/La consort est le frère de la dirigeante"
# Defines a character the opposite gender of the consort / Utilisé pour définir un personnage de sexe opposé à celui du ou de la consort
defined_text = {
	name = GetAntiFrereSoeurCons
	text = {
		localisation_key = string_soeur_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_frere_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


# Ex: "[from him/her]" => "[de lui/d'elle]" (lower case / minuscule)
defined_text = {
	name = GetDeluiDelleCons
	text = {
		localisation_key = string_delui_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_delle_FR
		trigger = {
			has_female_consort = yes
		}
	}
}
# Ex: "[From him/her]" => "[De lui/D'elle]" (upper case / majuscule)
defined_text = {
	name = GetDeluiDelleConsCap
	text = {
		localisation_key = string_delui_cap_FR
		trigger = {
			has_female_consort = no
		}
	}
	text = {
		localisation_key = string_delle_cap_FR
		trigger = {
			has_female_consort = yes
		}
	}
}


#################################################################
###   Administrative Advisors // Conseillers administratifs   ###
#################################################################
# Ex: "So [he/she] tried" => "Aussi a-t-[il/elle] tenté de"
defined_text = {
	name = GetIlElleAdm
	text = {
		localisation_key = string_il_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[He/She] tried" => "[Il/Elle] a tenté de"
defined_text = {
	name = GetIlElleAdmCap
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "As for [him/her]" => "Quant à [lui/elle]"
defined_text = {
	name = GetLuiElleAdm
	text = {
		localisation_key = string_lui_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[Him/Her] is..." => "[Lui/Elle] est..."
defined_text = {
	name = GetLuiElleAdmCap
	text = {
		localisation_key = string_lui_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "That [him/her]" => "[que lui/qu'elle]" (lower case / minscule)
defined_text = {
	name = GetQueluiQuelleAdm
	text = {
		localisation_key = string_quelui_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_quelle_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "That [him/her]" => "[Que lui/Qu'elle]" (upper case / majuscule)
defined_text = {
	name = GetQueluiQuelleAdmCap
	text = {
		localisation_key = string_quelui_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_quelle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "He saw [him/her]" => "Il [le/la] vit"
defined_text = {
	name = GetLeLaFAdm
	text = {
		localisation_key = string_le_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "Firing [him/her] would have been..." => "[Le/La] renvoyer aurait été..."
defined_text = {
	name = GetLeLaFAdmCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}

# Ex: "[the] treasurer" => "[le/la] financier/ère"
defined_text = {
	name = GetLeLaLAdm
	text = {
		localisation_key = string_le_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				#employed_advisor = { type = artist is_male = yes } # separated to allow the use of l' / séparé pour utiliser l'
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				#employed_advisor = { type = inquisitor is_male = yes } # separated to allow the use of l' / séparé pour utiliser l'
			}
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				#employed_advisor = { type = artist is_female = yes } # separated to allow the use of l' / séparé pour utiliser l'
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				#employed_advisor = { type = inquisitor is_female = yes } # separated to allow the use of l' / séparé pour utiliser l'
			}
		}
	}
	text = {
		localisation_key = string_l_FR
		trigger = {
			OR = {
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = inquisitor is_male = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[The] treasurer" => "[Le/La] financier/ère"
defined_text = {
	name = GetLeLaLAdmCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				#employed_advisor = { type = artist is_male = yes } # separated to allow the use of L' / séparé pour utiliser L'
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				#employed_advisor = { type = inquisitor is_male = yes } # separated to allow the use of l' / séparé pour utiliser l'
			}
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				#employed_advisor = { type = artist is_female = yes } # separated to allow the use of l' / séparé pour utiliser l'
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				#employed_advisor = { type = inquisitor is_female = yes } # separated to allow the use of l' / séparé pour utiliser l'
			}
		}
	}
	text = {
		localisation_key = string_l_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = inquisitor is_male = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}

# Ex: "[this] treasurer" => "[ce/cette] financier/ère"
defined_text = {
	name = GetCeCetteAdm
	text = {
		localisation_key = string_ce_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				#employed_advisor = { type = artist is_male = yes } # separated to allow the use of cet / séparé pour utiliser cet
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				#employed_advisor = { type = inquisitor is_male = yes } # separated to allow the use of cet / séparé pour utiliser cet
			}
		}
	}
	text = {
		localisation_key = string_cet_FR
		trigger = {
			OR = {
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[This] treasurer" => "[Ce/Cette] financier/ère"
defined_text = {
	name = GetCeCetteAdmCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				#employed_advisor = { type = artist is_male = yes } # separated to allow the use of cet / séparé pour utiliser cet
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				#employed_advisor = { type = inquisitor is_male = yes } # separated to allow the use of cet / séparé pour utiliser cet
			}
		}
	}
	text = {
		localisation_key = string_cet_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "[this] advisor" => "[ce/cette] conseiller" (lower case/minuscule)
# Mandatory use of masculine form "ce" for some situations / Emploi forcé de la forme masculine "ce" dans certains contextes
defined_text = {
	name = GetCeCetteFAdm
	text = {
		localisation_key = string_ce_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[This] sick person" => "[Cet/Cette] consort" (upper case/majuscule)
# Mandatory use of masculine form "Ce" for some situations / Emploi forcé de la forme masculine "Ce" dans certains contextes
defined_text = {
	name = GetCeCetteFAdmCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "[this] (wo)man" => "[cet/cette] homme/femme" (lower case/minuscule)
# Mandatory use of masculine form "cet" for some situations / Emploi forcé de la forme masculine "cet" dans certains contextes
defined_text = {
	name = GetCetCetteFAdm
	text = {
		localisation_key = string_cet_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[This] (wo)man" => "[Cet/Cette] homme/femme" (upper case/majuscule)
# Mandatory use of masculine form "Cet" for some situations / Emploi forcé de la forme masculine "Cet" dans certains contextes
defined_text = {
	name = GetCetCetteFAdmCap
	text = {
		localisation_key = string_cet_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "[his] adviser" => "s[on] conseiller/s[a] conseillère"
defined_text = {
	name = GetOnAAdm
	text = {
		localisation_key = string_on_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = artist is_female = yes } # separated to allow the use of "(s)on" / séparé pour utiliser "(s)on"
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
				employed_advisor = { type = inquisitor is_female = yes } # separated to allow the use of "(s)on" / séparé pour utiliser "(s)on"
			}
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				#employed_advisor = { type = artist is_female = yes } # separated to allow the use of "son" / séparé pour utiliser "son"
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				#employed_advisor = { type = inquisitor is_female = yes } # separated to allow the use of "son" / séparé pour utiliser "son"
			}
		}
	}
}


# Ex: "[his] adviser" => "s[on] conseiller/s[a] conseillère"
defined_text = {
	name = GetOnAFAdm
	text = {
		localisation_key = string_on_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "[the one] which" => "[celui/celle] qui"
defined_text = {
	name = GetCeluiCelleAdm
	text = {
		localisation_key = string_celui_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_celle_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[The one] which" => "[Celui/Celle] qui"
defined_text = {
	name = GetCeluiCelleAdmCap
	text = {
		localisation_key = string_celui_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_celle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}

# Ex: "[of the] advisor" => "[du] conseiller/[de la] conseillère"
defined_text = {
	name = GetDuDelaAdm
	text = {
		localisation_key = string_du_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				#employed_advisor = { type = artist is_male = yes } # separated to allow the use of "de l'" / séparé pour utiliser "de l'"
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				#employed_advisor = { type = inquisitor is_male = yes } # separated to allow the use of "de l'" / séparé pour utiliser "de l'"
			}
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				#employed_advisor = { type = artist is_female = yes } # separated to allow the use of "de l'" / séparé pour utiliser "de l'"
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				#employed_advisor = { type = inquisitor is_female = yes } # separated to allow the use of "de l'" / séparé pour utiliser "de l'"
			}
		}
	}
	text = {
		localisation_key = string_del_FR
		trigger = {
			OR = {
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = inquisitor is_male = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[Of the] advisor" => "[Du] conseiller/[De la] conseillère"
defined_text = {
	name = GetDuDelaAdmCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				#employed_advisor = { type = artist is_female = yes } # separated to allow the use of "De l'" / séparé pour utiliser "De l'"
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				#employed_advisor = { type = inquisitor is_male = yes } # separated to allow the use of "De l'" / séparé pour utiliser "De l'"
			}
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				#employed_advisor = { type = artist is_female = yes } # separated to allow the use of "De l'" / séparé pour utiliser "De l'"
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				#employed_advisor = { type = inquisitor is_female = yes } # separated to allow the use of "De l'" / séparé pour utiliser "De l'"
			}
		}
	}
	text = {
		localisation_key = string_del_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = inquisitor is_male = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "[of the] new advisor" => "[du] nouveau conseiller/[de la] nouvelle conseillère"
defined_text = {
	name = GetDuDelaFAdm
	text = {
		localisation_key = string_du_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[Of the] new advisor" => "[Du] nouveau conseiller/[De la] nouvelle conseillère"
defined_text = {
	name = GetDuDelaFAdmCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "[to the] treasurer" => "[au/à la] financier/ère"
defined_text = {
	name = GetAuAlaAdm
	text = {
		localisation_key = string_au_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				#employed_advisor = { type = artist is_male = yes } # separated to allow the use of "à l'" / séparé pour utiliser "à l'"
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				#employed_advisor = { type = inquisitor is_male = yes } # separated to allow the use of "à l'" / séparé pour utiliser "à l'"
			}
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				#employed_advisor = { type = artist is_female = yes } # separated to allow the use of "à l'" / séparé pour utiliser "à l'"
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				#employed_advisor = { type = inquisitor is_female = yes } # separated to allow the use of "à l'" / séparé pour utiliser "à l'"
			}
		}
	}
	text = {
		localisation_key = string_al_FR
		trigger = {
			OR = {
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = inquisitor is_male = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[To the] treasurer" => "[Au/À la] financier/ère"
defined_text = {
	name = GetAuAlaAdmCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				#employed_advisor = { type = artist is_male = yes } # separated to allow the use of "À l'" / séparé pour utiliser "À l'"
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				#employed_advisor = { type = inquisitor is_male = yes } # separated to allow the use of "À l'" / séparé pour utiliser "À l'"
			}
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				#employed_advisor = { type = artist is_female = yes } # separated to allow the use of "À l'" / séparé pour utiliser "À l'"
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				#employed_advisor = { type = inquisitor is_female = yes } # separated to allow the use of "À l'" / séparé pour utiliser "À l'"
			}
		}
	}
	text = {
		localisation_key = string_al_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = inquisitor is_male = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "[to the] treasurer" => "[au/à la] financier/ère"
defined_text = {
	name = GetAuAlaFAdm
	text = {
		localisation_key = string_au_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[To the] treasurer" => "[Au/À la] financier/ère"
defined_text = {
	name = GetAuAlaFAdmCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "[if] he/she" => "[s'il]/[si elle]" (lower case/minuscule)
defined_text = {
	name = GetSilSielleAdm
	text = {
		localisation_key = string_sil_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_sielle_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[If] he/she" => "[S'il]/[Si elle]" (upper case/majuscule)
defined_text = {
	name = GetSilSielleAdmCap
	text = {
		localisation_key = string_sil_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_sielle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "next treasurer" => "prochain[ø/e] trésorier/ère"
defined_text = {
	name = GetXEAdm
	text = {
		localisation_key = string_X_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_e_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}

# Ex: "first consort" => "premier[er/ère] financi[er/ère]"
defined_text = {
	name = GetErEreAdm
	text = {
		localisation_key = string_er_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_ere_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "[new] advisor" => "nouv[eau/elle] conseiller/conseillère"
defined_text = {
	name = GetEauElleAdm
	text = {
		localisation_key = string_eau_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


# Ex: "[Treasurer]" => "[financer/financière]" (lower case)
defined_text = {
	name = GetAdm
	text = {
		localisation_key = string_philosopher_FR
		trigger = {
			advisor = philosopher
		}
	}
	text = {
		localisation_key = string_natural_scientist_FR
		trigger = {
			advisor = natural_scientist
		}
	}
	text = {
		localisation_key = string_artist_FR
		trigger = {
			advisor = artist
		}
	}
	text = {
		localisation_key = string_treasurer_male_FR
		trigger = {
			employed_advisor = { type = treasurer is_male = yes }
		}
	}
	text = {
		localisation_key = string_treasurer_fem_FR
		trigger = {
			employed_advisor = { type = treasurer is_female = yes }
		}
	}
	text = {
		localisation_key = string_theologian_male_FR
		trigger = {
			employed_advisor = { type = theologian is_male = yes }
		}
	}
	text = {
		localisation_key = string_theologian_fem_FR
		trigger = {
			employed_advisor = { type = theologian is_female = yes }
		}
	}
	text = {
		localisation_key = string_master_of_mint_male_FR
		trigger = {
			employed_advisor = { type = master_of_mint is_male = yes }
		}
	}
	text = {
		localisation_key = string_master_of_mint_fem_FR
		trigger = {
			employed_advisor = { type = master_of_mint is_female = yes }
		}
	}
	text = {
		localisation_key = string_inquisitor_male_FR
		trigger = {
			employed_advisor = { type = inquisitor is_male = yes }
		}
	}
	text = {
		localisation_key = string_inquisitor_fem_FR
		trigger = {
			employed_advisor = { type = inquisitor is_female = yes }
		}
	}
}



# Ex: "[from him/her]" => "[de lui/d'elle]" (lower case / minuscule)
defined_text = {
	name = GetDeluiDelleAdm
	text = {
		localisation_key = string_delui_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_delle_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}
# Ex: "[From him/her]" => "[De lui/D'elle]" (upper case / majuscule)
defined_text = {
	name = GetDeluiDelleAdmCap
	text = {
		localisation_key = string_delui_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_male = yes }
				employed_advisor = { type = natural_scientist is_male = yes }
				employed_advisor = { type = artist is_male = yes }
				employed_advisor = { type = treasurer is_male = yes }
				employed_advisor = { type = theologian is_male = yes }
				employed_advisor = { type = master_of_mint is_male = yes }
				employed_advisor = { type = inquisitor is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_delle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = philosopher is_female = yes }
				employed_advisor = { type = natural_scientist is_female = yes }
				employed_advisor = { type = artist is_female = yes }
				employed_advisor = { type = treasurer is_female = yes }
				employed_advisor = { type = theologian is_female = yes }
				employed_advisor = { type = master_of_mint is_female = yes }
				employed_advisor = { type = inquisitor is_female = yes }
			}
		}
	}
}


############################################################
###   Diplomatic Advisors // Conseillers diplomatiques   ###
############################################################
# Ex: "So [he/she] tried" => "Aussi a-t-[il/elle] tenté de"
defined_text = {
	name = GetIlElleDip
	text = {
		localisation_key = string_il_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[He/She] tried" => "[Il/Elle] a tenté de"
defined_text = {
	name = GetIlElleDipCap
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "As for [him/her]" => "Quant à [lui/elle]"
defined_text = {
	name = GetLuiElleDip
	text = {
		localisation_key = string_lui_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[Him/Her] is..." => "[Lui/Elle] est..."
defined_text = {
	name = GetLuiElleDipCap
	text = {
		localisation_key = string_lui_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "That [him/her]" => "[que lui/qu'elle]" (lower case / minscule)
defined_text = {
	name = GetQueluiQuelleDip
	text = {
		localisation_key = string_quelui_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_quelle_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "That [him/her]" => "[Que lui/Qu'elle]" (upper case / majuscule)
defined_text = {
	name = GetQueluiQuelleDipCap
	text = {
		localisation_key = string_quelui_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_quelle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "He saw [him/her]" => "Il [le/la] vit"
defined_text = {
	name = GetLeLaFDip
	text = {
		localisation_key = string_le_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "Firing [him/her] would have been..." => "[Le/La] renvoyer aurait été..."
defined_text = {
	name = GetLeLaFDipCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}

# Ex: "[the] trader" => "[le/la] négociant(e)"
defined_text = {
	name = GetLeLaLDip
	text = {
		localisation_key = string_le_FR
		trigger = {
			OR = {
				#employed_advisor = { type = statesman is_male = yes } # separated to allow the use of l' / séparé pour utiliser l'
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_l_FR
		trigger = {
			employed_advisor = { type = statesman is_male = yes }
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[The] trader" => "[Le/La] négociant(e)"
defined_text = {
	name = GetLeLaLDipCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			OR = {
				#employed_advisor = { type = statesman is_male = yes } # separated to allow the use of L' / séparé pour utiliser L'
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_l_cap_FR
		trigger = {
			employed_advisor = { type = statesman is_male = yes }
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}

# Ex: "[this] trader" => "[ce/cette] négociant(e)"
defined_text = {
	name = GetCeCetteDip
	text = {
		localisation_key = string_ce_FR
		trigger = {
			OR = {
				#employed_advisor = { type = statesman is_male = yes } # separated to allow the use of "cet" / séparé pour utiliser "cet"
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cet_FR
		trigger = {
			employed_advisor = { type = statesman is_male = yes }
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[This] trader" => "[Ce/Cette] négociant(e)"
defined_text = {
	name = GetCeCetteDipCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			OR = {
				#employed_advisor = { type = statesman is_male = yes } # separated to allow the use of "Cet" / séparé pour utiliser "Cet"
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cet_cap_FR
		trigger = {
			employed_advisor = { type = statesman is_male = yes }
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}

# Ex: "[this] advisor" => "[ce/cette] conseiller" (lower case/minuscule)
# Mandatory use of masculine form "ce" for some situations / Emploi forcé de la forme masculine "ce" dans certains contextes
defined_text = {
	name = GetCeCetteFDip
	text = {
		localisation_key = string_ce_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[This] sick person" => "[Cet/Cette] consort" (upper case/majuscule)
# Mandatory use of masculine form "Ce" for some situations / Emploi forcé de la forme masculine "Ce" dans certains contextes
defined_text = {
	name = GetCeCetteFDipCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "[this] (wo)man" => "[cet/cette] homme/femme" (lower case/minuscule)
# Mandatory use of masculine form "cet" for some situations / Emploi forcé de la forme masculine "cet" dans certains contextes
defined_text = {
	name = GetCetCetteFDip
	text = {
		localisation_key = string_cet_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[This] (wo)man" => "[Cet/Cette] homme/femme" (upper case/majuscule)
# Mandatory use of masculine form "Cet" for some situations / Emploi forcé de la forme masculine "Cet" dans certains contextes
defined_text = {
	name = GetCetCetteFDipCap
	text = {
		localisation_key = string_cet_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "[his] advisor" => "s[on] conseiller/s[a] conseillère"
defined_text = {
	name = GetOnADip
	text = {
		localisation_key = string_on_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "[his] advisor" => "s[on] conseiller/s[a] conseillère"
defined_text = {
	name = GetOnAFDip
	text = {
		localisation_key = string_on_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "[the one] which" => "[celui/celle] qui"
defined_text = {
	name = GetCeluiCelleDip
	text = {
		localisation_key = string_celui_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_celle_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[The one] which" => "[Celui/Celle] qui"
defined_text = {
	name = GetCeluiCelleDipCap
	text = {
		localisation_key = string_celui_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_celle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "[of the] advisor" => "[du] conseiller/[de la] conseillère"
defined_text = {
	name = GetDuDelaDip
	text = {
		localisation_key = string_du_FR
		trigger = {
			OR = {
				#employed_advisor = { type = statesman is_male = yes } # separated to allow the use of "de l'" / séparé pour utiliser "de l'"
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_del_FR
		trigger = {
			employed_advisor = { type = statesman is_male = yes }
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[Of the] advisor" => "[Du] conseiller/[De la] conseillère"
defined_text = {
	name = GetDuDelaDipCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			OR = {
				#employed_advisor = { type = statesman is_male = yes } # separated to allow the use of "de l'" / séparé pour utiliser "de l'"
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_del_cap_FR
		trigger = {
			employed_advisor = { type = statesman is_male = yes }
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "[of the] new advisor" => "[du] nouveau conseiller/[de la] nouvelle conseillère"
defined_text = {
	name = GetDuDelaFDip
	text = {
		localisation_key = string_du_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[Of the] new advisor" => "[Du] nouveau conseiller/[De la] nouvelle conseillère"
defined_text = {
	name = GetDuDelaFDipCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "[to the] trader" => "[au/à la] négociant(e)"
defined_text = {
	name = GetAuAlaDip
	text = {
		localisation_key = string_au_FR
		trigger = {
			OR = {
				#employed_advisor = { type = statesman is_male = yes } # separated to allow use of "à l'" / séparé pour utiliser "à l'"
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_al_FR
		trigger = {
			employed_advisor = { type = statesman is_male = yes }
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[To the] trader" => "[Au/À la] négociant(e)"
defined_text = {
	name = GetAuAlaDipCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			OR = {
				#employed_advisor = { type = statesman is_male = yes } # separated to allow use of "À l'"
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_al_cap_FR
		trigger = {
			employed_advisor = { type = statesman is_male = yes }
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "[to the] trader" => "[au/à la] négociant(e)"
defined_text = {
	name = GetAuAlaFDip
	text = {
		localisation_key = string_au_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[To the] trader" => "[Au/À la] négociant(e)"
defined_text = {
	name = GetAuAlaFDipCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "[if] he/she" => "[s'il]/[si elle]" (lower case/minuscule)
defined_text = {
	name = GetSilSielleDip
	text = {
		localisation_key = string_sil_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_sielle_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[If] he/she" => "[S'il]/[Si elle]" (upper case/majuscule)
defined_text = {
	name = GetSilSielleDipCap
	text = {
		localisation_key = string_sil_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_sielle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "next trader" => "prochain[ø/e] négociant(e)"
defined_text = {
	name = GetXEDip
	text = {
		localisation_key = string_X_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_e_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}

# Ex: "first trader" => "premier[er/ère] négociant(e)"
defined_text = {
	name = GetErEreDip
	text = {
		localisation_key = string_er_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_ere_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "[new] advisor" => "nouv[eau/elle] conseiller/conseillère"
defined_text = {
	name = GetEauElleDip
	text = {
		localisation_key = string_eau_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}


# Ex: "[Trader]" => "[négociant/négociante]" (lower case)
defined_text = {
	name = GetDip
	text = {
		localisation_key = string_statesman_male_FR
		trigger = {
			employed_advisor = { type = statesman is_male = yes }
		}
	}
	text = {
		localisation_key = string_statesman_fem_FR
		trigger = {
			employed_advisor = { type = statesman is_female = yes }
		}
	}
	text = {
		localisation_key = string_naval_reformer_male_FR
		trigger = {
			employed_advisor = { type = naval_reformer is_male = yes }
		}
	}
	text = {
		localisation_key = string_naval_reformer_fem_FR
		trigger = {
			employed_advisor = { type = naval_reformer is_female = yes }
		}
	}
	text = {
		localisation_key = string_trader_male_FR
		trigger = {
			employed_advisor = { type = trader is_male = yes }
		}
	}
	text = {
		localisation_key = string_trader_fem_FR
		trigger = {
			employed_advisor = { type = trader is_female = yes }
		}
	}
	text = {
		localisation_key = string_spymaster_male_FR
		trigger = {
			employed_advisor = { type = spymaster is_male = yes }
		}
	}
	text = {
		localisation_key = string_spymaster_fem_FR
		trigger = {
			employed_advisor = { type = spymaster is_female = yes }
		}
	}
	text = {
		localisation_key = string_colonial_governor_male_FR
		trigger = {
			employed_advisor = { type = colonial_governor is_male = yes }
		}
	}
	text = {
		localisation_key = string_colonial_governor_fem_FR
		trigger = {
			employed_advisor = { type = colonial_governor is_female = yes }
		}
	}
	text = {
		localisation_key = string_diplomat_male_FR
		trigger = {
			employed_advisor = { type = diplomat is_male = yes }
		}
	}
	text = {
		localisation_key = string_diplomat_fem_FR
		trigger = {
			employed_advisor = { type = diplomat is_female = yes }
		}
	}
	text = {
		localisation_key = string_navigator_male_FR
		trigger = {
			employed_advisor = { type = navigator is_male = yes }
		}
	}
	text = {
		localisation_key = string_navigator_fem_FR
		trigger = {
			employed_advisor = { type = navigator is_female = yes }
		}
	}
}


# Ex: "[from him/her]" => "[de lui/d'elle]" (lower case / minuscule)
defined_text = {
	name = GetDeluiDelleDip
	text = {
		localisation_key = string_delui_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_delle_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}
# Ex: "[From him/her]" => "[De lui/D'elle]" (upper case / majuscule)
defined_text = {
	name = GetDeluiDelleDipCap
	text = {
		localisation_key = string_delui_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_male = yes }
				employed_advisor = { type = naval_reformer is_male = yes }
				employed_advisor = { type = trader is_male = yes }
				employed_advisor = { type = spymaster is_male = yes }
				employed_advisor = { type = colonial_governor is_male = yes }
				employed_advisor = { type = diplomat is_male = yes }
				employed_advisor = { type = navigator is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_delle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = statesman is_female = yes }
				employed_advisor = { type = naval_reformer is_female = yes }
				employed_advisor = { type = trader is_female = yes }
				employed_advisor = { type = spymaster is_female = yes }
				employed_advisor = { type = colonial_governor is_female = yes }
				employed_advisor = { type = diplomat is_female = yes }
				employed_advisor = { type = navigator is_female = yes }
			}
		}
	}
}



#######################################################
###   Military Advisors // Conseillers militaires   ###
#######################################################
# Ex: "So [he/she] tried" => "Aussi a-t-[il/elle] tenté de"
defined_text = {
	name = GetIlElleMil
	text = {
		localisation_key = string_il_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}
# Ex: "[He/She] tried" => "[Il/Elle] a tenté de"
defined_text = {
	name = GetIlElleMilCap
	text = {
		localisation_key = string_il_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "As for [him/her]" => "Quant à [lui/elle]"
defined_text = {
	name = GetLuiElleMil
	text = {
		localisation_key = string_lui_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}
# Ex: "[Him/Her] is..." => "[Lui/Elle] est..."
defined_text = {
	name = GetLuiElleMilCap
	text = {
		localisation_key = string_lui_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "That [him/her]" => "[que lui/qu'elle]" (lower case / minscule)
defined_text = {
	name = GetQueluiQuelleMil
	text = {
		localisation_key = string_quelui_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_quelle_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}
# Ex: "That [him/her]" => "[Que lui/Qu'elle]" (upper case / majuscule)
defined_text = {
	name = GetQueluiQuelleMilCap
	text = {
		localisation_key = string_quelui_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_quelle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "He saw [him/her]" => "Il [le/la] vit"
defined_text = {
	name = GetLeLaFMil
	text = {
		localisation_key = string_le_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}
# Ex: "Firing [him/her] would have been..." => "[Le/La] renvoyer aurait été..."
defined_text = {
	name = GetLeLaFMilCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}

# Ex: "[the] quartermaster" => "[le/la] fourrier/ère"
defined_text = {
	name = GetLeLaLMil
	text = {
		localisation_key = string_le_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				#employed_advisor = { type = army_organiser is_male = yes } # separated to allow the use of l' / séparé pour utiliser l'
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				#employed_advisor = { type = fortification_expert is_male = yes } # separated to allow the use of l' / séparé pour utiliser l'
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				#employed_advisor = { type = army_organiser is_female = yes } # separated to allow the use of l' / séparé pour utiliser l'
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				#employed_advisor = { type = fortification_expert is_female = yes } # separated to allow the use of l' / séparé pour utiliser l'
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
	text = {
		localisation_key = string_l_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
			}
		}
	}
}
# Ex: "[The] quartermaster" => "[Le/La] fourrier/ère"
defined_text = {
	name = GetLeLaLMilCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				#employed_advisor = { type = army_organiser is_male = yes } # separated to allow the use of L' / séparé pour utiliser L'
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				#employed_advisor = { type = fortification_expert is_male = yes } # separated to allow the use of L' / séparé pour utiliser L'
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				#employed_advisor = { type = army_organiser is_female = yes } # separated to allow the use of L' / séparé pour utiliser L'
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				#employed_advisor = { type = fortification_expert is_female = yes } # separated to allow the use of L' / séparé pour utiliser L'
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
	text = {
		localisation_key = string_l_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
			}
		}
	}
}

# Ex: "[this] quartermaster" => "[ce/cette] fourrier/ère"
defined_text = {
	name = GetCeCetteMil
	text = {
		localisation_key = string_ce_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				#employed_advisor = { type = army_organiser is_male = yes } # separated to allow the use of "cet" / séparé pour utiliser "cet"
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				#employed_advisor = { type = fortification_expert is_male = yes } # separated to allow the use of "cet" / séparé pour utiliser "cet"
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cet_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}
# Ex: "[This] quartermaster" => "[Ce/Cette] fourrier/ère"
defined_text = {
	name = GetCeCetteMilCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				#employed_advisor = { type = army_organiser is_male = yes } # separated to allow the use of "Cet" / séparé pour utiliser "Cet"
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				#employed_advisor = { type = fortification_expert is_male = yes } # separated to allow the use of "Cet" / séparé pour utiliser "Cet"
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cet_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}

# Ex: "[this] advisor" => "[ce/cette] conseiller" (lower case/minuscule)
# Mandatory use of masculine form "ce" for some situations / Emploi forcé de la forme masculine "ce" dans certains contextes
defined_text = {
	name = GetCeCetteFMil
	text = {
		localisation_key = string_ce_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}
# Ex: "[This] sick person" => "[Cet/Cette] consort" (upper case/majuscule)
# Mandatory use of masculine form "Ce" for some situations / Emploi forcé de la forme masculine "Ce" dans certains contextes
defined_text = {
	name = GetCeCetteFMilCap
	text = {
		localisation_key = string_ce_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "[this] (wo)man" => "[cet/cette] homme/femme" (lower case/minuscule)
# Mandatory use of masculine form "cet" for some situations / Emploi forcé de la forme masculine "cet" dans certains contextes
defined_text = {
	name = GetCetCetteFMil
	text = {
		localisation_key = string_cet_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}
# Ex: "[This] (wo)man" => "[Cet/Cette] homme/femme" (upper case/majuscule)
# Mandatory use of masculine form "Cet" for some situations / Emploi forcé de la forme masculine "Cet" dans certains contextes
defined_text = {
	name = GetCetCetteFMilCap
	text = {
		localisation_key = string_cet_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_cette_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "[his] advisor" => "s[on] conseiller/s[a] conseillère"
defined_text = {
	name = GetOnAMil
	text = {
		localisation_key = string_on_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = army_organiser is_female = yes } # separated to allow the use of "(s)on" / séparé pour utiliser "(s)on"
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = fortification_expert is_female = yes } # separated to allow the use of "(s)on" / séparé pour utiliser "(s)on"
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				#employed_advisor = { type = army_organiser is_female = yes } # separated to allow the use of "(s)on" / séparé pour utiliser "(s)on"
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				#employed_advisor = { type = fortification_expert is_female = yes } # separated to allow the use of "(s)on" / séparé pour utiliser "(s)on"
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "[his] advisor" => "s[on] conseiller/s[a] conseillère"
defined_text = {
	name = GetOnAFMil
	text = {
		localisation_key = string_on_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_a_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "[the one] which" => "[celui/celle] qui"
defined_text = {
	name = GetCeluiCelleMil
	text = {
		localisation_key = string_celui_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_celle_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}
# Ex: "[The one] which" => "[Celui/Celle] qui"
defined_text = {
	name = GetCeluiCelleMilCap
	text = {
		localisation_key = string_celui_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_celle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "[of the] advisor" => "[du] conseiller/[de la] conseillère"
defined_text = {
	name = GetDuDelaMil
	text = {
		localisation_key = string_du_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				#employed_advisor = { type = army_organiser is_male = yes } # separated to use "de l'" / séparé pour utiliser "de l'"
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				#employed_advisor = { type = fortification_expert is_male = yes } # separated to use "de l'" / séparé pour utiliser "de l'"
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				#employed_advisor = { type = army_organiser is_female = yes } # separated to use "de l'" / séparé pour utiliser "de l'"
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				#employed_advisor = { type = fortification_expert is_female = yes } # separated to use "de l'" / séparé pour utiliser "de l'"
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
	text = {
		localisation_key = string_del_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
			}
		}
	}
}
# Ex: "[Of the] advisor" => "[Du] conseiller/[De la] conseillère"
defined_text = {
	name = GetDuDelaMilCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				#employed_advisor = { type = army_organiser is_male = yes } # separated to use "De l'" / séparé pour utiliser "De l'"
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				#employed_advisor = { type = fortification_expert is_male = yes } # separated to use "De l'" / séparé pour utiliser "De l'"
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				#employed_advisor = { type = army_organiser is_female = yes } # separated to use "De l'" / séparé pour utiliser "De l'"
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				#employed_advisor = { type = fortification_expert is_female = yes } # separated to use "De l'" / séparé pour utiliser "De l'"
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
	text = {
		localisation_key = string_del_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
			}
		}
	}
}


# Ex: "[of the] advisor" => "[du] nouveau conseiller/[de la] nouvelle conseillère"
defined_text = {
	name = GetDuDelaFMil
	text = {
		localisation_key = string_du_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}
# Ex: "[Of the] new advisor" => "[Du] nouveau conseiller/[De la] nouvelle conseillère"
defined_text = {
	name = GetDuDelaFMilCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "[to the] quartermaster" => "[au/à la] fourrier/ère"
defined_text = {
	name = GetAuAlaMil
	text = {
		localisation_key = string_au_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				#employed_advisor = { type = army_organiser is_male = yes } # separated to allow use of "à l'" / séparé pour utiliser "à l'"
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				#employed_advisor = { type = fortification_expert is_male = yes } # separated to allow use of "à l'" / séparé pour utiliser "à l'"
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				#employed_advisor = { type = army_organiser is_female = yes } # separated to allow use of "à l'" / séparé pour utiliser "à l'"
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				#employed_advisor = { type = fortification_expert is_female = yes } # separated to allow use of "à l'" / séparé pour utiliser "à l'"
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
	text = {
		localisation_key = string_al_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
			}
		}
	}
}
# Ex: "[To the] quartermaster" => "[Au/À la] fourrier/ère"
defined_text = {
	name = GetAuAlaMilCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				#employed_advisor = { type = army_organiser is_male = yes } # separated to allow use of "À l'" / séparé pour utiliser "À l'"
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				#employed_advisor = { type = fortification_expert is_male = yes } # separated to allow use of "À l'" / séparé pour utiliser "À l'"
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				#employed_advisor = { type = army_organiser is_female = yes } # separated to allow use of "À l'" / séparé pour utiliser "À l'"
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				#employed_advisor = { type = fortification_expert is_female = yes } # separated to allow use of "À l'" / séparé pour utiliser "À l'"
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
			}
		}
	}
}


# Ex: "[to the] quartermaster" => "[au/à la] fourrier/ère"
defined_text = {
	name = GetAuAlaFMil
	text = {
		localisation_key = string_au_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}
# Ex: "[To the] quartermaster" => "[Au/À la] fourrier/ère"
defined_text = {
	name = GetAuAlaFMilCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "[if] he/she" => "[s'il]/[si elle]" (lower case/minuscule)
defined_text = {
	name = GetSilSielleMil
	text = {
		localisation_key = string_sil_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_sielle_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}
# Ex: "[If] he/she" => "[S'il]/[Si elle]" (upper case/majuscule)
defined_text = {
	name = GetSilSielleMilCap
	text = {
		localisation_key = string_sil_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_sielle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "next quartermaster" => "prochain[ø/e] fourrier/ère"
defined_text = {
	name = GetXEMil
	text = {
		localisation_key = string_X_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_e_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}

# Ex: "first quartermaster" => "premier[er/ère] fourrier/ère"
defined_text = {
	name = GetErEreMil
	text = {
		localisation_key = string_er_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_ere_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "[new] advisor" => "nouv[eau/elle] conseiller/conseillère"
defined_text = {
	name = GetEauElleMil
	text = {
		localisation_key = string_eau_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_elle_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}


# Ex: "[Quartermaster]" => "[fourrier/ière]" (lower case)
defined_text = {
	name = GetMil
	text = {
		localisation_key = string_army_reformer_male_FR
		trigger = {
			employed_advisor = { type = army_reformer is_male = yes }
		}
	}
	text = {
		localisation_key = string_army_reformer_fem_FR
		trigger = {
			employed_advisor = { type = army_reformer is_female = yes }
		}
	}
	text = {
		localisation_key = string_army_organiser_male_FR
		trigger = {
			employed_advisor = { type = army_organiser is_male = yes }
		}
	}
	text = {
		localisation_key = string_army_organiser_fem_FR
		trigger = {
			employed_advisor = { type = army_organiser is_female = yes }
		}
	}
	text = {
		localisation_key = string_commandant_male_FR
		trigger = {
			employed_advisor = { type = commandant is_male = yes }
		}
	}
	text = {
		localisation_key = string_commandant_fem_FR
		trigger = {
			employed_advisor = { type = commandant is_female = yes }
		}
	}
	text = {
		localisation_key = string_quartermaster_male_FR
		trigger = {
			employed_advisor = { type = quartermaster is_male = yes }
		}
	}
	text = {
		localisation_key = string_quartermaster_fem_FR
		trigger = {
			employed_advisor = { type = quartermaster is_female = yes }
		}
	}
	text = {
		localisation_key = string_recruitmaster_male_FR
		trigger = {
			employed_advisor = { type = recruitmaster is_male = yes }
		}
	}
	text = {
		localisation_key = string_recruitmaster_fem_FR
		trigger = {
			employed_advisor = { type = recruitmaster is_female = yes }
		}
	}
	text = {
		localisation_key = string_fortification_expert_male_FR
		trigger = {
			employed_advisor = { type = fortification_expert is_male = yes }
		}
	}
	text = {
		localisation_key = string_fortification_expert_fem_FR
		trigger = {
			employed_advisor = { type = fortification_expert is_female = yes }
		}
	}
	text = {
		localisation_key = string_grand_captain_male_FR
		trigger = {
			employed_advisor = { type = grand_captain is_male = yes }
		}
	}
	text = {
		localisation_key = string_grand_captain_fem_FR
		trigger = {
			employed_advisor = { type = grand_captain is_female = yes }
		}
	}
}


# Ex: "[from him/her]" => "[de lui/d'elle]" (lower case / minuscule)
defined_text = {
	name = GetDeluiDelleMil
	text = {
		localisation_key = string_delui_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_delle_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}
# Ex: "[From him/her]" => "[De lui/D'elle]" (upper case / majuscule)
defined_text = {
	name = GetDeluiDelleMilCap
	text = {
		localisation_key = string_delui_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_male = yes }
				employed_advisor = { type = army_organiser is_male = yes }
				employed_advisor = { type = commandant is_male = yes }
				employed_advisor = { type = quartermaster is_male = yes }
				employed_advisor = { type = recruitmaster is_male = yes }
				employed_advisor = { type = fortification_expert is_male = yes }
				employed_advisor = { type = grand_captain is_male = yes }
			}
		}
	}
	text = {
		localisation_key = string_delle_cap_FR
		trigger = {
			OR = {
				employed_advisor = { type = army_reformer is_female = yes }
				employed_advisor = { type = army_organiser is_female = yes }
				employed_advisor = { type = commandant is_female = yes }
				employed_advisor = { type = quartermaster is_female = yes }
				employed_advisor = { type = recruitmaster is_female = yes }
				employed_advisor = { type = fortification_expert is_female = yes }
				employed_advisor = { type = grand_captain is_female = yes }
			}
		}
	}
}



###################################################
###   Religion Groups // Familles religieuses   ###
###################################################

### Ex: "[Christianity]" => "[christianisme]"
defined_text = {
	name = GetFamRelN
	text = {
		localisation_key = string_christian_n_FR
		trigger = { religion_group = christian }
	}
	text = {
		localisation_key = string_muslim_n_FR
		trigger = { religion_group = muslim }
	}
	text = {
		localisation_key = string_pagan_n_FR
		trigger = { religion_group = pagan }
	}
	text = {
		localisation_key = string_jewish_group_n_FR
		trigger = { religion_group = jewish_group }
	}
}


### Ex: "[Muslim]" => "[musulman]" (singular masculine/masculin singulier)
defined_text = {
	name = GetFamRelMS
	text = {
		localisation_key = string_christian_ms_FR
		trigger = { religion_group = christian }
	}
	text = {
		localisation_key = string_muslim_ms_FR
		trigger = { religion_group = muslim }
	}
	text = {
		localisation_key = string_pagan_ms_FR
		trigger = { religion_group = pagan }
	}
	text = {
		localisation_key = string_jewish_group_ms_FR
		trigger = { religion_group = jewish_group }
	}
}


### Ex: "[Muslim]" => "[musulmane]" (singular feminine/féminin singulier)
defined_text = {
	name = GetFamRelFS
	text = {
		localisation_key = string_christian_fs_FR
		trigger = { religion_group = christian }
	}
	text = {
		localisation_key = string_muslim_fs_FR
		trigger = { religion_group = muslim }
	}
	text = {
		localisation_key = string_pagan_fs_FR
		trigger = { religion_group = pagan }
	}
	text = {
		localisation_key = string_jewish_group_fs_FR
		trigger = { religion_group = jewish_group }
	}
}


### Ex: "[Muslim]" => "[musulmans]" (plural masculine/masculin pluriel)
defined_text = {
	name = GetFamRelMP
	text = {
		localisation_key = string_christian_mp_FR
		trigger = { religion_group = christian }
	}
	text = {
		localisation_key = string_muslim_mp_FR
		trigger = { religion_group = muslim }
	}
	text = {
		localisation_key = string_pagan_mp_FR
		trigger = { religion_group = pagan }
	}
	text = {
		localisation_key = string_jewish_group_mp_FR
		trigger = { religion_group = jewish_group }
	}
}


### Ex: "[Muslim]" => "[musulmanes]" (plural feminine/féminin pluriel)
defined_text = {
	name = GetFamRelFP
	text = {
		localisation_key = string_christian_fp_FR
		trigger = { religion_group = christian }
	}
	text = {
		localisation_key = string_muslim_fp_FR
		trigger = { religion_group = muslim }
	}
	text = {
		localisation_key = string_pagan_fp_FR
		trigger = { religion_group = pagan }
	}
	text = {
		localisation_key = string_jewish_group_fp_FR
		trigger = { religion_group = jewish_group }
	}
}


### Ex: "[the] Christianity" => "le [christianisme] / [l']islam"
defined_text = {
	name = GetLeLaFamRel
	text = {
		localisation_key = string_le_FR
		trigger = {
			OR = {
				religion_group = christian
				religion_group = pagan
				religion_group = jewish_group
			}
		}
	}
	text = {
		localisation_key = string_l_FR
		trigger = {
			religion_group = muslim
		}
	}
}
### Ex: "[The] christianism" => "Le [christianisme] / [L']islam"
defined_text = {
	name = GetLeLaFamRelCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			OR = {
				religion_group = christian
				religion_group = pagan
				religion_group = jewish_group
			}
		}
	}
	text = {
		localisation_key = string_l_cap_FR
		trigger = {
			religion_group = muslim
		}
	}
}


### Ex: "[of] Christianity" => "[du] christianisme"
defined_text = {
	name = GetDuDelaFamRel
	text = {
		localisation_key = string_du_FR
		trigger = {
			OR = {
				religion_group = christian
				religion_group = pagan
				religion_group = jewish_group
			}
		}
	}
	text = {
		localisation_key = string_del_FR
		trigger = {
			religion_group = muslim
		}
	}
}
### Ex: "[Of] Christianity" => "[Du] christianisme / [De l']islam"
defined_text = {
	name = GetDuDelaFamRelCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			OR = {
				religion_group = christian
				religion_group = pagan
				religion_group = jewish_group
			}
		}
	}
	text = {
		localisation_key = string_del_cap_FR
		trigger = {
			religion_group = muslim
		}
	}
}


### Ex: "[to] Christianity" => "[au] christianisme/[à l']islam"
defined_text = {
	name = GetAuAlaFamRel
	text = {
		localisation_key = string_au_FR
		trigger = {
			OR = {
				religion_group = christian
				religion_group = pagan
				religion_group = jewish_group
			}
		}
	}
	text = {
		localisation_key = string_al_FR
		trigger = {
			religion_group = muslim
		}
	}
}
### Ex: "[Of] Christianity" => "[Du] christianisme / [De l']islam"
defined_text = {
	name = GetAuAlaFamRelCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			OR = {
				religion_group = christian
				religion_group = pagan
				religion_group = jewish_group
			}
		}
	}
	text = {
		localisation_key = string_al_cap_FR
		trigger = {
			religion_group = muslim
		}
	}
}



###################################################
### Religion (Main) // Religions (principale)   ###
###################################################

### Ex: "[Protestantism]" => "[protestantisme]"
defined_text = {
	name = GetRelN
	text = {
		localisation_key = string_catholic_n_FR
		trigger = { religion = catholic }
	}
	text = {
		localisation_key = string_protestant_n_FR
		trigger = { religion = protestant }
	}
	text = {
		localisation_key = string_reformed_n_FR
		trigger = { religion = reformed }
	}
	text = {
		localisation_key = string_orthodox_n_FR
		trigger = { religion = orthodox }
	}
	text = {
		localisation_key = string_sunni_n_FR
		trigger = { religion = sunni }
	}
	text = {
		localisation_key = string_shiite_n_FR
		trigger = { religion = shiite }
	}
	text = {
		localisation_key = string_ibadi_n_FR
		trigger = { religion = ibadi }
	}
	text = {
		localisation_key = string_shamanism_n_FR
		trigger = { religion = shamanism }
	}
	text = {
		localisation_key = string_norse_pagan_reformed_n_FR
		trigger = { religion = norse_pagan_reformed }
	}
	text = {
		localisation_key = string_tengri_pagan_reformed_n_FR
		trigger = { religion = tengri_pagan_reformed }
	}
	text = {
		localisation_key = string_jewish_n_FR
		trigger = { religion = jewish }
	}
}


### Ex: "[Protestant]" => "[protestant]" (singular masculine / masculin singulier)
defined_text = {
	name = GetRelMS
	text = {
		localisation_key = string_catholic_s_FR
		trigger = { religion = catholic }
	}
	text = {
		localisation_key = string_protestant_ms_FR
		trigger = { religion = protestant }
	}
	text = {
		localisation_key = string_reformed_ms_FR
		trigger = { religion = reformed }
	}
	text = {
		localisation_key = string_orthodox_s_FR
		trigger = { religion = orthodox }
	}
	text = {
		localisation_key = string_sunni_s_FR
		trigger = { religion = sunni }
	}
	text = {
		localisation_key = string_shiite_s_FR
		trigger = { religion = shiite }
	}
	text = {
		localisation_key = string_ibadi_s_FR
		trigger = { religion = ibadi }
	}
	text = {
		localisation_key = string_shamanism_s_FR
		trigger = { religion = shamanism }
	}
	text = {
		localisation_key = string_norse_pagan_reformed_s_FR
		trigger = { religion = norse_pagan_reformed }
	}
	text = {
		localisation_key = string_tengri_pagan_reformed_s_FR
		trigger = { religion = tengri_pagan_reformed }
	}
	text = {
		localisation_key = string_jewish_ms_FR
		trigger = { religion = jewish }
	}
}


### Ex: "[Protestant]" => "[protestante]" (singular feminine / féminin singulier)
defined_text = {
	name = GetRelFS
	text = {
		localisation_key = string_catholic_s_FR
		trigger = { religion = catholic }
	}
	text = {
		localisation_key = string_protestant_fs_FR
		trigger = { religion = protestant }
	}
	text = {
		localisation_key = string_reformed_fs_FR
		trigger = { religion = reformed }
	}
	text = {
		localisation_key = string_orthodox_s_FR
		trigger = { religion = orthodox }
	}
	text = {
		localisation_key = string_sunni_s_FR
		trigger = { religion = sunni }
	}
	text = {
		localisation_key = string_shiite_s_FR
		trigger = { religion = shiite }
	}
	text = {
		localisation_key = string_ibadi_s_FR
		trigger = { religion = ibadi }
	}
	text = {
		localisation_key = string_shamanism_s_FR
		trigger = { religion = shamanism }
	}
	text = {
		localisation_key = string_norse_pagan_reformed_s_FR
		trigger = { religion = norse_pagan_reformed }
	}
	text = {
		localisation_key = string_tengri_pagan_reformed_s_FR
		trigger = { religion = tengri_pagan_reformed }
	}
	text = {
		localisation_key = string_jewish_fs_FR
		trigger = { religion = jewish }
	}
}


### Ex: "[Protestant]" => "[protestants]" (plural masculine / masculin pluriel)
defined_text = {
	name = GetRelMP
	text = {
		localisation_key = string_catholic_p_FR
		trigger = { religion = catholic }
	}
	text = {
		localisation_key = string_protestant_mp_FR
		trigger = { religion = protestant }
	}
	text = {
		localisation_key = string_reformed_mp_FR
		trigger = { religion = reformed }
	}
	text = {
		localisation_key = string_orthodox_p_FR
		trigger = { religion = orthodox }
	}
	text = {
		localisation_key = string_sunni_p_FR
		trigger = { religion = sunni }
	}
	text = {
		localisation_key = string_shiite_p_FR
		trigger = { religion = shiite }
	}
	text = {
		localisation_key = string_ibadi_p_FR
		trigger = { religion = ibadi }
	}
	text = {
		localisation_key = string_shamanism_p_FR
		trigger = { religion = shamanism }
	}
	text = {
		localisation_key = string_norse_pagan_reformed_p_FR
		trigger = { religion = norse_pagan_reformed }
	}
	text = {
		localisation_key = string_tengri_pagan_reformed_p_FR
		trigger = { religion = tengri_pagan_reformed }
	}
	text = {
		localisation_key = string_jewish_mp_FR
		trigger = { religion = jewish }
	}
}


### Ex: "[Protestant]" => "[protestantes]" (plural feminine / féminin pluriel)
defined_text = {
	name = GetRelFP
	text = {
		localisation_key = string_catholic_p_FR
		trigger = { religion = catholic }
	}
	text = {
		localisation_key = string_protestant_fp_FR
		trigger = { religion = protestant }
	}
	text = {
		localisation_key = string_reformed_fp_FR
		trigger = { religion = reformed }
	}
	text = {
		localisation_key = string_orthodox_p_FR
		trigger = { religion = orthodox }
	}
	text = {
		localisation_key = string_sunni_p_FR
		trigger = { religion = sunni }
	}
	text = {
		localisation_key = string_shiite_p_FR
		trigger = { religion = shiite }
	}
	text = {
		localisation_key = string_ibadi_p_FR
		trigger = { religion = ibadi }
	}
	text = {
		localisation_key = string_shamanism_p_FR
		trigger = { religion = shamanism }
	}
	text = {
		localisation_key = string_norse_pagan_reformed_p_FR
		trigger = { religion = norse_pagan_reformed }
	}
	text = {
		localisation_key = string_tengri_pagan_reformed_p_FR
		trigger = { religion = tengri_pagan_reformed }
	}
	text = {
		localisation_key = string_jewish_fp_FR
		trigger = { religion = jewish }
	}
}


### Ex: "[the] Sunnism/Reform/# " => "[le] sunnisme/[la] Réforme/[l']iconoclasme"
defined_text = {
	name = GetLeLaRel
	text = {
		localisation_key = string_le_FR
		trigger = {
			OR = {
				religion = catholic religion = jewish
				religion = norse_pagan_reformed religion = protestant religion = shamanism
				religion = shiite religion = sunni religion = tengri_pagan_reformed
			}
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			religion = reformed
		}
	}
	text = {
		localisation_key = string_l_FR
		trigger = {
			OR = {
				religion = orthodox religion = ibadi
			}
		}
	}
}
### Ex: "[The] Sunnism/Reform/# " => "[Le] sunnisme/[La] Réforme/[L']iconoclasme"
defined_text = {
	name = GetLeLaRelCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			OR = {
				religion = catholic religion = jewish
				religion = norse_pagan_reformed religion = protestant religion = shamanism
				religion = shiite religion = sunni religion = tengri_pagan_reformed
			}
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			religion = reformed
		}
	}
	text = {
		localisation_key = string_l_cap_FR
		trigger = {
			OR = {
				religion = orthodox religion = ibadi
			}
		}
	}
}


### Ex: "propagate [it] (sunnism/orthodoxy)" => "[le] diffuser (sunnisme)/[la] diffuser (orthoxie)"
defined_text = {
	name = GetLeLaFRel
	text = {
		localisation_key = string_le_FR
		trigger = {
			OR = {
				religion = catholic religion = jewish
				religion = norse_pagan_reformed religion = protestant religion = shamanism
				religion = shiite religion = sunni religion = tengri_pagan_reformed
				religion = ibadi
			}
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			OR = {
				religion = reformed religion = orthodox
			}
		}
	}
}
### Ex: "Propagate [it] (sunnism/orthodoxy)" => "[Le] propager (sunnisme)/[La] propager (orthoxie)"
defined_text = {
	name = GetLeLaFRelCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			OR = {
				religion = catholic religion = jewish
				religion = norse_pagan_reformed religion = protestant religion = shamanism
				religion = shiite religion = sunni religion = tengri_pagan_reformed
				religion = ibadi
			}
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			OR = {
				religion = reformed religion = orthodox
			}
		}
	}
}


### Ex: "[of the] Sunnism/Reform/# " => "[du] sunnisme/[de la] Réforme/[de l']iconoclasme"
defined_text = {
	name = GetDuDelaRel
	text = {
		localisation_key = string_du_FR
		trigger = {
			OR = {
				religion = catholic religion = jewish
				religion = norse_pagan_reformed religion = protestant religion = shamanism
				religion = shiite religion = sunni religion = tengri_pagan_reformed
			}
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			religion = reformed
		}
	}
	text = {
		localisation_key = string_del_FR
		trigger = {
			OR = {
				religion = orthodox religion = ibadi
			}
		}
	}
}
### Ex: "[Of the] Sunnism/Reform/# " => "[Du] sunnisme/[De la] Réforme/[De l']iconoclasme"
defined_text = {
	name = GetDuDelaRelCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			OR = {
				religion = catholic religion = jewish
				religion = norse_pagan_reformed religion = protestant religion = shamanism
				religion = shiite religion = sunni religion = tengri_pagan_reformed
			}
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			religion = reformed
		}
	}
	text = {
		localisation_key = string_del_cap_FR
		trigger = {
			OR = {
				religion = orthodox religion = ibadi
			}
		}
	}
}


### Ex: "[to] Sunnism/Reform/# " => "[au] sunnisme/[à la] Réforme/[à l']iconoclasme"
defined_text = {
	name = GetAuAlaRel
	text = {
		localisation_key = string_au_FR
		trigger = {
			OR = {
				religion = catholic religion = jewish
				religion = norse_pagan_reformed religion = protestant religion = shamanism
				religion = shiite religion = sunni religion = tengri_pagan_reformed
			}
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			religion = reformed
		}
	}
	text = {
		localisation_key = string_al_FR
		trigger = {
			OR = {
				religion = orthodox religion = ibadi
			}
		}
	}
}
### Ex: "[To] Sunnism/Reform/# " => "[Au] sunnisme/[À la] Réforme/[À l']iconoclasme"
defined_text = {
	name = GetAuAlaRelCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			OR = {
				religion = catholic religion = jewish
				religion = norse_pagan_reformed religion = protestant religion = shamanism
				religion = shiite religion = sunni religion = tengri_pagan_reformed
			}
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			religion = reformed
		}
	}
	text = {
		localisation_key = string_al_cap_FR
		trigger = {
			OR = {
				religion = orthodox religion = ibadi
			}
		}
	}
}

#####################################################
### Secondary Religion // Religions secondaires   ###
#####################################################

### Ex: "[Protestantism]" => "[protestantisme]"
defined_text = {
	name = GetRelSecN
	text = {
		localisation_key = string_catholic_n_FR
		trigger = { secondary_religion = catholic }
	}
	text = {
		localisation_key = string_protestant_n_FR
		trigger = { secondary_religion = protestant }
	}
	text = {
		localisation_key = string_reformed_n_FR
		trigger = { secondary_religion = reformed }
	}
	text = {
		localisation_key = string_orthodox_n_FR
		trigger = { secondary_religion = orthodox }
	}
	text = {
		localisation_key = string_sunni_n_FR
		trigger = { secondary_religion = sunni }
	}
	text = {
		localisation_key = string_shiite_n_FR
		trigger = { secondary_religion = shiite }
	}
	text = {
		localisation_key = string_ibadi_n_FR
		trigger = { secondary_religion = ibadi }
	}
	text = {
		localisation_key = string_shamanism_n_FR
		trigger = { secondary_religion = shamanism }
	}
	text = {
		localisation_key = string_norse_pagan_reformed_n_FR
		trigger = { secondary_religion = norse_pagan_reformed }
	}
	text = {
		localisation_key = string_tengri_pagan_reformed_n_FR
		trigger = { secondary_religion = tengri_pagan_reformed }
	}
	text = {
		localisation_key = string_jewish_n_FR
		trigger = { secondary_religion = jewish }
	}
}


### Ex: "[Protestant]" => "[protestant]" (singular masculine / masculin singulier)
defined_text = {
	name = GetRelSecMS
	text = {
		localisation_key = string_catholic_s_FR
		trigger = { secondary_religion = catholic }
	}
	text = {
		localisation_key = string_protestant_ms_FR
		trigger = { secondary_religion = protestant }
	}
	text = {
		localisation_key = string_reformed_ms_FR
		trigger = { secondary_religion = reformed }
	}
	text = {
		localisation_key = string_orthodox_s_FR
		trigger = { secondary_religion = orthodox }
	}
	text = {
		localisation_key = string_sunni_s_FR
		trigger = { secondary_religion = sunni }
	}
	text = {
		localisation_key = string_shiite_s_FR
		trigger = { secondary_religion = shiite }
	}
	text = {
		localisation_key = string_ibadi_s_FR
		trigger = { secondary_religion = ibadi }
	}
	text = {
		localisation_key = string_shamanism_s_FR
		trigger = { secondary_religion = shamanism }
	}
	text = {
		localisation_key = string_norse_pagan_reformed_s_FR
		trigger = { secondary_religion = norse_pagan_reformed }
	}
	text = {
		localisation_key = string_tengri_pagan_reformed_s_FR
		trigger = { secondary_religion = tengri_pagan_reformed }
	}
	text = {
		localisation_key = string_jewish_ms_FR
		trigger = { secondary_religion = jewish }
	}
}


### Ex: "[Protestant]" => "[protestante]" (singular feminine / féminin singulier)
defined_text = {
	name = GetRelSecFS
	text = {
		localisation_key = string_catholic_s_FR
		trigger = { secondary_religion = catholic }
	}
	text = {
		localisation_key = string_protestant_fs_FR
		trigger = { secondary_religion = protestant }
	}
	text = {
		localisation_key = string_reformed_fs_FR
		trigger = { secondary_religion = reformed }
	}
	text = {
		localisation_key = string_orthodox_s_FR
		trigger = { secondary_religion = orthodox }
	}
	text = {
		localisation_key = string_sunni_s_FR
		trigger = { secondary_religion = sunni }
	}
	text = {
		localisation_key = string_shiite_s_FR
		trigger = { secondary_religion = shiite }
	}
	text = {
		localisation_key = string_ibadi_s_FR
		trigger = { secondary_religion = ibadi }
	}
	text = {
		localisation_key = string_shamanism_s_FR
		trigger = { secondary_religion = shamanism }
	}
	text = {
		localisation_key = string_norse_pagan_reformed_s_FR
		trigger = { secondary_religion = norse_pagan_reformed }
	}
	text = {
		localisation_key = string_tengri_pagan_reformed_s_FR
		trigger = { secondary_religion = tengri_pagan_reformed }
	}
	text = {
		localisation_key = string_jewish_fs_FR
		trigger = { secondary_religion = jewish }
	}
}


### Ex: "[Protestant]" => "[protestants]" (plural masculine / masculin pluriel)
defined_text = {
	name = GetRelSecMP
	text = {
		localisation_key = string_catholic_p_FR
		trigger = { secondary_religion = catholic }
	}
	text = {
		localisation_key = string_protestant_mp_FR
		trigger = { secondary_religion = protestant }
	}
	text = {
		localisation_key = string_reformed_mp_FR
		trigger = { secondary_religion = reformed }
	}
	text = {
		localisation_key = string_orthodox_p_FR
		trigger = { secondary_religion = orthodox }
	}
	text = {
		localisation_key = string_sunni_p_FR
		trigger = { secondary_religion = sunni }
	}
	text = {
		localisation_key = string_shiite_p_FR
		trigger = { secondary_religion = shiite }
	}
	text = {
		localisation_key = string_ibadi_p_FR
		trigger = { secondary_religion = ibadi }
	}
	text = {
		localisation_key = string_shamanism_p_FR
		trigger = { secondary_religion = shamanism }
	}
	text = {
		localisation_key = string_norse_pagan_reformed_p_FR
		trigger = { secondary_religion = norse_pagan_reformed }
	}
	text = {
		localisation_key = string_tengri_pagan_reformed_p_FR
		trigger = { secondary_religion = tengri_pagan_reformed }
	}
	text = {
		localisation_key = string_jewish_mp_FR
		trigger = { secondary_religion = jewish }
	}
}


### Ex: "[Protestant]" => "[protestantes]" (plural feminine / féminin pluriel)
defined_text = {
	name = GetRelSecFP
	text = {
		localisation_key = string_catholic_p_FR
		trigger = { secondary_religion = catholic }
	}
	text = {
		localisation_key = string_protestant_fp_FR
		trigger = { secondary_religion = protestant }
	}
	text = {
		localisation_key = string_reformed_fp_FR
		trigger = { secondary_religion = reformed }
	}
	text = {
		localisation_key = string_orthodox_p_FR
		trigger = { secondary_religion = orthodox }
	}
	text = {
		localisation_key = string_sunni_p_FR
		trigger = { secondary_religion = sunni }
	}
	text = {
		localisation_key = string_shiite_p_FR
		trigger = { secondary_religion = shiite }
	}
	text = {
		localisation_key = string_ibadi_p_FR
		trigger = { secondary_religion = ibadi }
	}
	text = {
		localisation_key = string_shamanism_p_FR
		trigger = { secondary_religion = shamanism }
	}
	text = {
		localisation_key = string_norse_pagan_reformed_p_FR
		trigger = { secondary_religion = norse_pagan_reformed }
	}
	text = {
		localisation_key = string_tengri_pagan_reformed_p_FR
		trigger = { secondary_religion = tengri_pagan_reformed }
	}
	text = {
		localisation_key = string_jewish_fp_FR
		trigger = { secondary_religion = jewish }
	}
}


### Ex: "[the] Sunnism/Reform/# " => "[le] sunnisme/[la] Réforme/[l']iconoclasme"
defined_text = {
	name = GetLeLaRelSec
	text = {
		localisation_key = string_le_FR
		trigger = {
			OR = {
				secondary_religion = catholic secondary_religion = jewish
				secondary_religion = norse_pagan_reformed secondary_religion = protestant secondary_religion = shamanism
				secondary_religion = shiite secondary_religion = sunni secondary_religion = tengri_pagan_reformed
			}
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			secondary_religion = reformed
		}
	}
	text = {
		localisation_key = string_l_FR
		trigger = {
			OR = {
				secondary_religion = orthodox secondary_religion = ibadi
			}
		}
	}
}
### Ex: "[The] Sunnism/Reform/# " => "[Le] sunnisme/[La] Réforme/[L']iconoclasme"
defined_text = {
	name = GetLeLaRelSecCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			OR = {
				secondary_religion = catholic secondary_religion = jewish
				secondary_religion = norse_pagan_reformed secondary_religion = protestant secondary_religion = shamanism
				secondary_religion = shiite secondary_religion = sunni secondary_religion = tengri_pagan_reformed
			}
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			secondary_religion = reformed
		}
	}
	text = {
		localisation_key = string_l_cap_FR
		trigger = {
			OR = {
				secondary_religion = orthodox secondary_religion = ibadi
			}
		}
	}
}


### Ex: "propagate [it] (sunnism/orthodoxy)" => "[le] diffuser (sunnisme)/[la] diffuser (orthodoxie)"
defined_text = {
	name = GetLeLaFRelSec
	text = {
		localisation_key = string_le_FR
		trigger = {
			OR = {
				secondary_religion = catholic secondary_religion = jewish
				secondary_religion = norse_pagan_reformed secondary_religion = protestant secondary_religion = shamanism
				secondary_religion = shiite secondary_religion = sunni secondary_religion = tengri_pagan_reformed secondary_religion = ibadi
			}
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			OR = {
				secondary_religion = reformed secondary_religion = orthodox
			}
		}
	}
}
### Ex: "Propagate [it] (sunnism/orthodoxy)" => "[Le] diffuser (sunnisme)/[La] diffuser (orthodoxie)"
defined_text = {
	name = GetLeLaFRelSecCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			OR = {
				secondary_religion = catholic secondary_religion = jewish
				secondary_religion = norse_pagan_reformed secondary_religion = protestant secondary_religion = shamanism
				secondary_religion = shiite secondary_religion = sunni secondary_religion = tengri_pagan_reformed secondary_religion = ibadi
			}
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			OR = {
				secondary_religion = reformed secondary_religion = orthodox
			}
		}
	}
}


### Ex: "[of the] Sunnism/Reform/# " => "[du] sunnisme/[de la] Réforme/[de l']iconoclasme"
defined_text = {
	name = GetDuDelaRelSec
	text = {
		localisation_key = string_du_FR
		trigger = {
			OR = {
				secondary_religion = catholic secondary_religion = jewish
				secondary_religion = norse_pagan_reformed secondary_religion = protestant secondary_religion = shamanism
				secondary_religion = shiite secondary_religion = sunni secondary_religion = tengri_pagan_reformed
			}
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			secondary_religion = reformed
		}
	}
	text = {
		localisation_key = string_del_FR
		trigger = {
			OR = {
				secondary_religion = orthodox secondary_religion = ibadi
			}
		}
	}
}
### Ex: "[Of the] Sunnism/Reform/# " => "[Du] sunnisme/[De la] Réforme/[De l']iconoclasme"
defined_text = {
	name = GetDuDelaRelSecCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			OR = {
				secondary_religion = catholic secondary_religion = jewish
				secondary_religion = norse_pagan_reformed secondary_religion = protestant secondary_religion = shamanism
				secondary_religion = shiite secondary_religion = sunni secondary_religion = tengri_pagan_reformed
			}
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			secondary_religion = reformed
		}
	}
	text = {
		localisation_key = string_del_cap_FR
		trigger = {
			OR = {
				secondary_religion = orthodox secondary_religion = ibadi
			}
		}
	}
}


### Ex: "[to] Sunnism/Reform/# " => "[au] sunnisme/[à la] Réforme/[à l']iconoclasme"
defined_text = {
	name = GetAuAlaRelSec
	text = {
		localisation_key = string_au_FR
		trigger = {
			OR = {
				secondary_religion = catholic secondary_religion = jewish
				secondary_religion = norse_pagan_reformed secondary_religion = protestant secondary_religion = shamanism
				secondary_religion = shiite secondary_religion = sunni secondary_religion = tengri_pagan_reformed
			}
		}
	}
	text = {
		localisation_key = string_ala_FR
		trigger = {
			secondary_religion = reformed
		}
	}
	text = {
		localisation_key = string_al_FR
		trigger = {
			OR = {
				secondary_religion = orthodox secondary_religion = ibadi
			}
		}
	}
}
### Ex: "[To] Sunnism/Reform/# " => "[Au] sunnisme/[À la] Réforme/[À l']iconoclasme"
defined_text = {
	name = GetAuAlaRelSecCap
	text = {
		localisation_key = string_au_cap_FR
		trigger = {
			OR = {
				secondary_religion = catholic secondary_religion = jewish
				secondary_religion = norse_pagan_reformed secondary_religion = protestant secondary_religion = shamanism
				secondary_religion = shiite secondary_religion = sunni secondary_religion = tengri_pagan_reformed
			}
		}
	}
	text = {
		localisation_key = string_ala_cap_FR
		trigger = {
			secondary_religion = reformed
		}
	}
	text = {
		localisation_key = string_al_cap_FR
		trigger = {
			OR = {
				secondary_religion = orthodox secondary_religion = ibadi
			}
		}
	}
}



##############################################################################
###   Culture Group Adjectives // Adjectifs pour les sphères culturelles   ###
##############################################################################

### Ex: "[Latin]" => "[latin]" (singular masculine / masculin singulier)
defined_text = {
	name = GetSphCultMS
	text = {
		localisation_key = string_germanic_ms_FR
		trigger = { culture_group = germanic }
	}
	text = {
		localisation_key = string_scandinavian_s_FR
		trigger = { culture_group = scandinavian }
	}
	text = {
		localisation_key = string_british_s_FR
		trigger = { culture_group = british }
	}
	text = {
		localisation_key = string_gaelic_s_FR
		trigger = { culture_group = gaelic }
	}
	text = {
		localisation_key = string_latin_ms_FR
		trigger = { culture_group = latin }
	}
	text = {
		localisation_key = string_iberian_s_FR
		trigger = { culture_group = iberian }
	}
	text = {
		localisation_key = string_french_m_FR
		trigger = { culture_group = french }
	}
	text = {
		localisation_key = string_south_slavic_ms_FR
		trigger = { culture_group = south_slavic }
	}
	text = {
		localisation_key = string_west_slavic_ms_FR
		trigger = { culture_group = west_slavic }
	}
	text = {
		localisation_key = string_carpathian_s_FR
		trigger = { culture_group = carpathian }
	}
	text = {
		localisation_key = string_east_slavic_ms_FR
		trigger = { culture_group = east_slavic }
	}
	text = {
		localisation_key = string_baltic_s_FR
		trigger = { culture_group = baltic }
	}
	text = {
		localisation_key = string_byzantine_ms_FR
		trigger = { culture_group = byzantine }
	}
	text = {
		localisation_key = string_turko_semitic_ms_FR
		trigger = { culture_group = oghuz }
	}
	text = {
		localisation_key = string_maghrebi_ms_FR
		trigger = { culture_group = maghrebi }
	}
	text = {
		localisation_key = string_lost_cultures_group_FR
		trigger = { culture_group = lost_cultures_group }
	}
}


### Ex: "[Latin]" => "[latine]" (singular feminine / féminin singulier)
defined_text = {
	name = GetSphCultFS
	text = {
		localisation_key = string_germanic_fs_FR
		trigger = { culture_group = germanic }
	}
	text = {
		localisation_key = string_scandinavian_s_FR
		trigger = { culture_group = scandinavian }
	}
	text = {
		localisation_key = string_british_s_FR
		trigger = { culture_group = british }
	}
	text = {
		localisation_key = string_gaelic_s_FR
		trigger = { culture_group = gaelic }
	}
	text = {
		localisation_key = string_latin_fs_FR
		trigger = { culture_group = latin }
	}
	text = {
		localisation_key = string_iberian_s_FR
		trigger = { culture_group = iberian }
	}
	text = {
		localisation_key = string_french_fs_FR
		trigger = { culture_group = french }
	}
	text = {
		localisation_key = string_south_slavic_fs_FR
		trigger = { culture_group = south_slavic }
	}
	text = {
		localisation_key = string_west_slavic_fs_FR
		trigger = { culture_group = west_slavic }
	}
	text = {
		localisation_key = string_carpathian_s_FR
		trigger = { culture_group = carpathian }
	}
	text = {
		localisation_key = string_east_slavic_fs_FR
		trigger = { culture_group = east_slavic }
	}
	text = {
		localisation_key = string_baltic_s_FR
		trigger = { culture_group = baltic }
	}
	text = {
		localisation_key = string_byzantine_fs_FR
		trigger = { culture_group = byzantine }
	}
	text = {
		localisation_key = string_turko_semitic_fs_FR
		trigger = { culture_group = oghuz }
	}
	text = {
		localisation_key = string_maghrebi_fs_FR
		trigger = { culture_group = maghrebi }
	}
	text = {
		localisation_key = string_lost_cultures_group_FR
		trigger = { culture_group = lost_cultures_group }
	}
}


### Ex: "[Latin]" => "[latins]" (plural masculine / masculin pluriel)
defined_text = {
	name = GetSphCultMP
	text = {
		localisation_key = string_germanic_mp_FR
		trigger = { culture_group = germanic }
	}
	text = {
		localisation_key = string_scandinavian_p_FR
		trigger = { culture_group = scandinavian }
	}
	text = {
		localisation_key = string_british_p_FR
		trigger = { culture_group = british }
	}
	text = {
		localisation_key = string_gaelic_p_FR
		trigger = { culture_group = gaelic }
	}
	text = {
		localisation_key = string_latin_mp_FR
		trigger = { culture_group = latin }
	}
	text = {
		localisation_key = string_iberian_p_FR
		trigger = { culture_group = iberian }
	}
	text = {
		localisation_key = string_french_m_FR
		trigger = { culture_group = french }
	}
	text = {
		localisation_key = string_south_slavic_mp_FR
		trigger = { culture_group = south_slavic }
	}
	text = {
		localisation_key = string_west_slavic_mp_FR
		trigger = { culture_group = west_slavic }
	}
	text = {
		localisation_key = string_carpathian_p_FR
		trigger = { culture_group = carpathian }
	}
	text = {
		localisation_key = string_east_slavic_mp_FR
		trigger = { culture_group = east_slavic }
	}
	text = {
		localisation_key = string_baltic_p_FR
		trigger = { culture_group = baltic }
	}
	text = {
		localisation_key = string_byzantine_mp_FR
		trigger = { culture_group = byzantine }
	}
	text = {
		localisation_key = string_turko_semitic_mp_FR
		trigger = { culture_group = oghuz }
	}
	text = {
		localisation_key = string_maghrebi_mp_FR
		trigger = { culture_group = maghrebi }
	}
	text = {
		localisation_key = string_lost_cultures_group_FR
		trigger = { culture_group = lost_cultures_group }
	}
}


### Ex: "[Latin]" => "[latines]" (plural feminine / féminin pluriel)
defined_text = {
	name = GetSphCultFP
	text = {
		localisation_key = string_germanic_fp_FR
		trigger = { culture_group = germanic }
	}
	text = {
		localisation_key = string_scandinavian_p_FR
		trigger = { culture_group = scandinavian }
	}
	text = {
		localisation_key = string_british_p_FR
		trigger = { culture_group = british }
	}
	text = {
		localisation_key = string_gaelic_p_FR
		trigger = { culture_group = gaelic }
	}
	text = {
		localisation_key = string_latin_fp_FR
		trigger = { culture_group = latin }
	}
	text = {
		localisation_key = string_iberian_p_FR
		trigger = { culture_group = iberian }
	}
	text = {
		localisation_key = string_french_fp_FR
		trigger = { culture_group = french }
	}
	text = {
		localisation_key = string_south_slavic_fp_FR
		trigger = { culture_group = south_slavic }
	}
	text = {
		localisation_key = string_west_slavic_fp_FR
		trigger = { culture_group = west_slavic }
	}
	text = {
		localisation_key = string_carpathian_p_FR
		trigger = { culture_group = carpathian }
	}
	text = {
		localisation_key = string_east_slavic_fp_FR
		trigger = { culture_group = east_slavic }
	}
	text = {
		localisation_key = string_baltic_p_FR
		trigger = { culture_group = baltic }
	}
	text = {
		localisation_key = string_byzantine_fp_FR
		trigger = { culture_group = byzantine }
	}
	text = {
		localisation_key = string_turko_semitic_fp_FR
		trigger = { culture_group = oghuz }
	}
	text = {
		localisation_key = string_maghrebi_fp_FR
		trigger = { culture_group = maghrebi }
	}
	text = {
		localisation_key = string_lost_cultures_group_FR
		trigger = { culture_group = lost_cultures_group }
	}
}


#############################################################						
###   Culture Adjectives // Adjectifs pour les cultures   ###						
#############################################################						

### Ex: "[Turkish]" => "[turc]" (singular masculine / masculin singulier)						
defined_text = {						
	name = GetCultMS					
	text = {
		localisation_key = string_pommeranian_ms_FR
		trigger = { OR = { primary_culture = pommeranian culture = pommeranian } }
	}
	text = {
		localisation_key = string_prussian_ms_FR
		trigger = { OR = { primary_culture = prussian culture = prussian } }
	}
	text = {
		localisation_key = string_hannoverian_ms_FR
		trigger = { OR = { primary_culture = hannoverian culture = hannoverian } }
	}
	text = {
		localisation_key = string_hessian_ms_FR
		trigger = { OR = { primary_culture = hessian culture = hessian } }
	}
	text = {
		localisation_key = string_saxon_ms_FR
		trigger = { OR = { primary_culture = saxon culture = saxon } }
	}
	text = {
		localisation_key = string_franconian_ms_FR
		trigger = { OR = { primary_culture = franconian culture = franconian } }
	}
	text = {
		localisation_key = string_swabian_s_FR
		trigger = { OR = { primary_culture = swabian culture = swabian } }
	}
	text = {
		localisation_key = string_swiss_s_FR
		trigger = { OR = { primary_culture = swiss culture = swiss } }
	}
	text = {
		localisation_key = string_bavarian_m_FR
		trigger = { OR = { primary_culture = bavarian culture = bavarian } }
	}
	text = {
		localisation_key = string_austrian_ms_FR
		trigger = { OR = { primary_culture = austrian culture = austrian } }
	}
	text = {
		localisation_key = string_dutch_m_FR
		trigger = { OR = { primary_culture = dutch culture = dutch } }
	}
	text = {
		localisation_key = string_flemish_ms_FR
		trigger = { OR = { primary_culture = flemish culture = flemish } }
	}
	text = {
		localisation_key = string_swedish_m_FR
		trigger = { OR = { primary_culture = swedish culture = swedish } }
	}
	text = {
		localisation_key = string_danish_m_FR
		trigger = { OR = { primary_culture = danish culture = danish } }
	}
	text = {
		localisation_key = string_english_m_FR
		trigger = { OR = { primary_culture = english culture = english } }
	}
	text = {
		localisation_key = string_welsh_m_FR
		trigger = { OR = { primary_culture = welsh culture = welsh } }
	}
	text = {
		localisation_key = string_scottish_m_FR
		trigger = { OR = { primary_culture = scottish culture = scottish } }
	}
	text = {
		localisation_key = string_irish_m_FR
		trigger = { OR = { primary_culture = irish culture = irish } }
	}
	text = {
		localisation_key = string_highland_scottish_s_FR
		trigger = { OR = { primary_culture = highland_scottish culture = highland_scottish } }
	}
	text = {
		localisation_key = string_lombard_ms_FR
		trigger = { OR = { primary_culture = lombard culture = lombard } }
	}
	text = {
		localisation_key = string_tuscan_ms_FR
		trigger = { OR = { primary_culture = tuscan culture = tuscan } }
	}
	text = {
		localisation_key = string_sardinian_s_FR
		trigger = { OR = { primary_culture = sardinian culture = sardinian } }
	}
	text = {
		localisation_key = string_romagnan_ms_FR
		trigger = { OR = { primary_culture = romagnan culture = romagnan } }
	}
	text = {
		localisation_key = string_ligurian_s_FR
		trigger = { OR = { primary_culture = ligurian culture = ligurian } }
	}
	text = {
		localisation_key = string_venetian_ms_FR
		trigger = { OR = { primary_culture = venetian culture = venetian } }
	}
	text = {
		localisation_key = string_neapolitan_ms_FR
		trigger = { OR = { primary_culture = neapolitan culture = neapolitan } }
	}
	text = {
		localisation_key = string_piedmontese_m_FR
		trigger = { OR = { primary_culture = piedmontese culture = piedmontese } }
	}
	text = {
		localisation_key = string_umbrian_ms_FR
		trigger = { OR = { primary_culture = umbrian culture = umbrian } }
	}
	text = {
		localisation_key = string_sicilian_ms_FR
		trigger = { OR = { primary_culture = sicilian culture = sicilian } }
	}
	text = {
		localisation_key = string_maltese_m_FR
		trigger = { OR = { primary_culture = maltese culture = maltese } }
	}
	text = {
		localisation_key = string_castillian_ms_FR
		trigger = { OR = { primary_culture = castillian culture = castillian } }
	}
	text = {
		localisation_key = string_leonese_m_FR
		trigger = { OR = { primary_culture = leonese culture = leonese } }
	}
	text = {
		localisation_key = string_aragonese_m_FR
		trigger = { OR = { primary_culture = aragonese culture = aragonese } }
	}
	text = {
		localisation_key = string_catalan_ms_FR
		trigger = { OR = { primary_culture = catalan culture = catalan } }
	}
	text = {
		localisation_key = string_galician_ms_FR
		trigger = { OR = { primary_culture = galician culture = galician } }
	}
	text = {
		localisation_key = string_andalucian_ms_FR
		trigger = { OR = { primary_culture = andalucian culture = andalucian } }
	}
	text = {
		localisation_key = string_portugese_m_FR
		trigger = { OR = { primary_culture = portugese culture = portugese } }
	}
	text = {
		localisation_key = string_basque_s_FR
		trigger = { OR = { primary_culture = basque culture = basque } }
	}
	text = {
		localisation_key = string_cosmopolitan_french_m_FR
		trigger = { OR = { primary_culture = cosmopolitan_french culture = cosmopolitan_french } }
	}
	text = {
		localisation_key = string_gascon_ms_FR
		trigger = { OR = { primary_culture = gascon culture = gascon } }
	}
	text = {
		localisation_key = string_normand_ms_FR
		trigger = { OR = { primary_culture = normand culture = normand } }
	}
	text = {
		localisation_key = string_burgundian_ms_FR
		trigger = { OR = { primary_culture = burgundian culture = burgundian } }
	}
	text = {
		localisation_key = string_occitain_ms_FR
		trigger = { OR = { primary_culture = occitain culture = occitain } }
	}
	text = {
		localisation_key = string_wallonian_ms_FR
		trigger = { OR = { primary_culture = wallonian culture = wallonian } }
	}
	text = {
		localisation_key = string_breton_ms_FR
		trigger = { OR = { primary_culture = breton culture = breton } }
	}
	text = {
		localisation_key = string_croatian_s_FR
		trigger = { OR = { primary_culture = croatian culture = croatian } }
	}
	text = {
		localisation_key = string_serbian_s_FR
		trigger = { OR = { primary_culture = serbian culture = serbian } }
	}
	text = {
		localisation_key = string_bulgarian_s_FR
		trigger = { OR = { primary_culture = bulgarian culture = bulgarian } }
	}
	text = {
		localisation_key = string_albanian_m_FR
		trigger = { OR = { primary_culture = albanian culture = albanian } }
	}
	text = {
		localisation_key = string_czech_s_FR
		trigger = { OR = { primary_culture = czech culture = czech } }
	}
	text = {
		localisation_key = string_polish_m_FR
		trigger = { OR = { primary_culture = polish culture = polish } }
	}
	text = {
		localisation_key = string_schlesian_ms_FR
		trigger = { OR = { primary_culture = schlesian culture = schlesian } }
	}
	text = {
		localisation_key = string_slovak_s_FR
		trigger = { OR = { primary_culture = slovak culture = slovak } }
	}
	text = {
		localisation_key = string_transylvanian_ms_FR
		trigger = { OR = { primary_culture = transylvanian culture = transylvanian } }
	}
	text = {
		localisation_key = string_hungarian_m_FR
		trigger = { OR = { primary_culture = hungarian culture = hungarian } }
	}
	text = {
		localisation_key = string_russian_s_FR
		trigger = { OR = { primary_culture = russian culture = russian } }
	}
	text = {
		localisation_key = string_byelorussian_s_FR
		trigger = { OR = { primary_culture = byelorussian culture = byelorussian } }
	}
	text = {
		localisation_key = string_ruthenian_s_FR
		trigger = { OR = { primary_culture = ruthenian culture = ruthenian } }
	}
	text = {
		localisation_key = string_lithuanian_ms_FR
		trigger = { OR = { primary_culture = lithuanian culture = lithuanian } }
	}
	text = {
		localisation_key = string_latvian_ms_FR
		trigger = { OR = { primary_culture = latvian culture = latvian } }
	}
	text = {
		localisation_key = string_greek_ms_FR
		trigger = { OR = { primary_culture = greek culture = greek } }
	}
	text = {
		localisation_key = string_turkish_ms_FR
		trigger = { OR = { primary_culture = turkish culture = turkish } }
	}
	text = {
		localisation_key = string_moroccan_ms_FR
		trigger = { OR = { primary_culture = moroccan culture = moroccan } }
	}
	text = {
		localisation_key = string_tunisian_ms_FR
		trigger = { OR = { primary_culture = tunisian culture = tunisian } }
	}
	text = {
		localisation_key = string_algerian_ms_FR
		trigger = { OR = { primary_culture = algerian culture = algerian } }
	}
	text = {
		localisation_key = string_berber_s_FR
		trigger = { OR = { primary_culture = berber culture = berber } }
	}
	text = {
		localisation_key = string_roman_ms_FR
		trigger = { OR = { primary_culture = roman culture = roman } }
	}
	text = {
		localisation_key = string_jan_mayenese_ms_FR
		trigger = { OR = { primary_culture = jan_mayenese culture = jan_mayenese } }
	}
	text = {
		localisation_key = string_pruthenian_s_FR
		trigger = { OR = { primary_culture = pruthenian culture = pruthenian } }
	}
	text = {
		localisation_key = string_anglosaxon_ms_FR
		trigger = { OR = { primary_culture = anglosaxon culture = anglosaxon } }
	}
}						
						
						
### Ex: "[Turkish]" => "[turque]" (singular feminine / féminin singulier)						
defined_text = {						
	name = GetCultFS					
	text = {
		localisation_key = string_pommeranian_fs_FR
		trigger = { OR = { primary_culture = pommeranian culture = pommeranian } }
	}
	text = {
		localisation_key = string_prussian_fs_FR
		trigger = { OR = { primary_culture = prussian culture = prussian } }
	}
	text = {
		localisation_key = string_hannoverian_fs_FR
		trigger = { OR = { primary_culture = hannoverian culture = hannoverian } }
	}
	text = {
		localisation_key = string_hessian_fs_FR
		trigger = { OR = { primary_culture = hessian culture = hessian } }
	}
	text = {
		localisation_key = string_saxon_fs_FR
		trigger = { OR = { primary_culture = saxon culture = saxon } }
	}
	text = {
		localisation_key = string_franconian_fs_FR
		trigger = { OR = { primary_culture = franconian culture = franconian } }
	}
	text = {
		localisation_key = string_swabian_s_FR
		trigger = { OR = { primary_culture = swabian culture = swabian } }
	}
	text = {
		localisation_key = string_swiss_s_FR
		trigger = { OR = { primary_culture = swiss culture = swiss } }
	}
	text = {
		localisation_key = string_bavarian_fs_FR
		trigger = { OR = { primary_culture = bavarian culture = bavarian } }
	}
	text = {
		localisation_key = string_austrian_fs_FR
		trigger = { OR = { primary_culture = austrian culture = austrian } }
	}
	text = {
		localisation_key = string_dutch_fs_FR
		trigger = { OR = { primary_culture = dutch culture = dutch } }
	}
	text = {
		localisation_key = string_flemish_fs_FR
		trigger = { OR = { primary_culture = flemish culture = flemish } }
	}
	text = {
		localisation_key = string_swedish_fs_FR
		trigger = { OR = { primary_culture = swedish culture = swedish } }
	}
	text = {
		localisation_key = string_danish_fs_FR
		trigger = { OR = { primary_culture = danish culture = danish } }
	}
	text = {
		localisation_key = string_english_fs_FR
		trigger = { OR = { primary_culture = english culture = english } }
	}
	text = {
		localisation_key = string_welsh_fs_FR
		trigger = { OR = { primary_culture = welsh culture = welsh } }
	}
	text = {
		localisation_key = string_scottish_fs_FR
		trigger = { OR = { primary_culture = scottish culture = scottish } }
	}
	text = {
		localisation_key = string_irish_fs_FR
		trigger = { OR = { primary_culture = irish culture = irish } }
	}
	text = {
		localisation_key = string_highland_scottish_s_FR
		trigger = { OR = { primary_culture = highland_scottish culture = highland_scottish } }
	}
	text = {
		localisation_key = string_lombard_fs_FR
		trigger = { OR = { primary_culture = lombard culture = lombard } }
	}
	text = {
		localisation_key = string_tuscan_fs_FR
		trigger = { OR = { primary_culture = tuscan culture = tuscan } }
	}
	text = {
		localisation_key = string_sardinian_s_FR
		trigger = { OR = { primary_culture = sardinian culture = sardinian } }
	}
	text = {
		localisation_key = string_romagnan_fs_FR
		trigger = { OR = { primary_culture = romagnan culture = romagnan } }
	}
	text = {
		localisation_key = string_ligurian_s_FR
		trigger = { OR = { primary_culture = ligurian culture = ligurian } }
	}
	text = {
		localisation_key = string_venetian_fs_FR
		trigger = { OR = { primary_culture = venetian culture = venetian } }
	}
	text = {
		localisation_key = string_neapolitan_fs_FR
		trigger = { OR = { primary_culture = neapolitan culture = neapolitan } }
	}
	text = {
		localisation_key = string_piedmontese_fs_FR
		trigger = { OR = { primary_culture = piedmontese culture = piedmontese } }
	}
	text = {
		localisation_key = string_umbrian_fs_FR
		trigger = { OR = { primary_culture = umbrian culture = umbrian } }
	}
	text = {
		localisation_key = string_sicilian_fs_FR
		trigger = { OR = { primary_culture = sicilian culture = sicilian } }
	}
	text = {
		localisation_key = string_maltese_fs_FR
		trigger = { OR = { primary_culture = maltese culture = maltese } }
	}
	text = {
		localisation_key = string_castillian_fs_FR
		trigger = { OR = { primary_culture = castillian culture = castillian } }
	}
	text = {
		localisation_key = string_leonese_fs_FR
		trigger = { OR = { primary_culture = leonese culture = leonese } }
	}
	text = {
		localisation_key = string_aragonese_fs_FR
		trigger = { OR = { primary_culture = aragonese culture = aragonese } }
	}
	text = {
		localisation_key = string_catalan_fs_FR
		trigger = { OR = { primary_culture = catalan culture = catalan } }
	}
	text = {
		localisation_key = string_galician_fs_FR
		trigger = { OR = { primary_culture = galician culture = galician } }
	}
	text = {
		localisation_key = string_andalucian_fs_FR
		trigger = { OR = { primary_culture = andalucian culture = andalucian } }
	}
	text = {
		localisation_key = string_portugese_fs_FR
		trigger = { OR = { primary_culture = portugese culture = portugese } }
	}
	text = {
		localisation_key = string_basque_s_FR
		trigger = { OR = { primary_culture = basque culture = basque } }
	}
	text = {
		localisation_key = string_cosmopolitan_french_fs_FR
		trigger = { OR = { primary_culture = cosmopolitan_french culture = cosmopolitan_french } }
	}
	text = {
		localisation_key = string_gascon_fs_FR
		trigger = { OR = { primary_culture = gascon culture = gascon } }
	}
	text = {
		localisation_key = string_normand_fs_FR
		trigger = { OR = { primary_culture = normand culture = normand } }
	}
	text = {
		localisation_key = string_burgundian_fs_FR
		trigger = { OR = { primary_culture = burgundian culture = burgundian } }
	}
	text = {
		localisation_key = string_occitain_fs_FR
		trigger = { OR = { primary_culture = occitain culture = occitain } }
	}
	text = {
		localisation_key = string_wallonian_fs_FR
		trigger = { OR = { primary_culture = wallonian culture = wallonian } }
	}
	text = {
		localisation_key = string_breton_fs_FR
		trigger = { OR = { primary_culture = breton culture = breton } }
	}
	text = {
		localisation_key = string_croatian_s_FR
		trigger = { OR = { primary_culture = croatian culture = croatian } }
	}
	text = {
		localisation_key = string_serbian_s_FR
		trigger = { OR = { primary_culture = serbian culture = serbian } }
	}
	text = {
		localisation_key = string_bulgarian_s_FR
		trigger = { OR = { primary_culture = bulgarian culture = bulgarian } }
	}
	text = {
		localisation_key = string_albanian_fs_FR
		trigger = { OR = { primary_culture = albanian culture = albanian } }
	}
	text = {
		localisation_key = string_czech_s_FR
		trigger = { OR = { primary_culture = czech culture = czech } }
	}
	text = {
		localisation_key = string_polish_fs_FR
		trigger = { OR = { primary_culture = polish culture = polish } }
	}
	text = {
		localisation_key = string_schlesian_fs_FR
		trigger = { OR = { primary_culture = schlesian culture = schlesian } }
	}
	text = {
		localisation_key = string_slovak_s_FR
		trigger = { OR = { primary_culture = slovak culture = slovak } }
	}
	text = {
		localisation_key = string_transylvanian_fs_FR
		trigger = { OR = { primary_culture = transylvanian culture = transylvanian } }
	}
	text = {
		localisation_key = string_hungarian_fs_FR
		trigger = { OR = { primary_culture = hungarian culture = hungarian } }
	}
	text = {
		localisation_key = string_russian_s_FR
		trigger = { OR = { primary_culture = russian culture = russian } }
	}
	text = {
		localisation_key = string_byelorussian_s_FR
		trigger = { OR = { primary_culture = byelorussian culture = byelorussian } }
	}
	text = {
		localisation_key = string_ruthenian_s_FR
		trigger = { OR = { primary_culture = ruthenian culture = ruthenian } }
	}
	text = {
		localisation_key = string_lithuanian_fs_FR
		trigger = { OR = { primary_culture = lithuanian culture = lithuanian } }
	}
	text = {
		localisation_key = string_latvian_fs_FR
		trigger = { OR = { primary_culture = latvian culture = latvian } }
	}
	text = {
		localisation_key = string_greek_fs_FR
		trigger = { OR = { primary_culture = greek culture = greek } }
	}
	text = {
		localisation_key = string_turkish_fs_FR
		trigger = { OR = { primary_culture = turkish culture = turkish } }
	}
	text = {
		localisation_key = string_moroccan_fs_FR
		trigger = { OR = { primary_culture = moroccan culture = moroccan } }
	}
	text = {
		localisation_key = string_tunisian_fs_FR
		trigger = { OR = { primary_culture = tunisian culture = tunisian } }
	}
	text = {
		localisation_key = string_algerian_fs_FR
		trigger = { OR = { primary_culture = algerian culture = algerian } }
	}
	text = {
		localisation_key = string_berber_s_FR
		trigger = { OR = { primary_culture = berber culture = berber } }
	}
	text = {
		localisation_key = string_roman_fs_FR
		trigger = { OR = { primary_culture = roman culture = roman } }
	}
	text = {
		localisation_key = string_jan_mayenese_fs_FR
		trigger = { OR = { primary_culture = jan_mayenese culture = jan_mayenese } }
	}
	text = {
		localisation_key = string_pruthenian_s_FR
		trigger = { OR = { primary_culture = pruthenian culture = pruthenian } }
	}
	text = {
		localisation_key = string_anglosaxon_fs_FR
		trigger = { OR = { primary_culture = anglosaxon culture = anglosaxon } }
	}
}						
						
						
### Ex: "[Turkish]" => "[turcs]" (plural masculine / masculin pluriel)						
defined_text = {						
	name = GetCultMP					
	text = {
		localisation_key = string_pommeranian_mp_FR
		trigger = { OR = { primary_culture = pommeranian culture = pommeranian } }
	}
	text = {
		localisation_key = string_prussian_mp_FR
		trigger = { OR = { primary_culture = prussian culture = prussian } }
	}
	text = {
		localisation_key = string_hannoverian_mp_FR
		trigger = { OR = { primary_culture = hannoverian culture = hannoverian } }
	}
	text = {
		localisation_key = string_hessian_mp_FR
		trigger = { OR = { primary_culture = hessian culture = hessian } }
	}
	text = {
		localisation_key = string_saxon_mp_FR
		trigger = { OR = { primary_culture = saxon culture = saxon } }
	}
	text = {
		localisation_key = string_franconian_mp_FR
		trigger = { OR = { primary_culture = franconian culture = franconian } }
	}
	text = {
		localisation_key = string_swabian_p_FR
		trigger = { OR = { primary_culture = swabian culture = swabian } }
	}
	text = {
		localisation_key = string_swiss_p_FR
		trigger = { OR = { primary_culture = swiss culture = swiss } }
	}
	text = {
		localisation_key = string_bavarian_m_FR
		trigger = { OR = { primary_culture = bavarian culture = bavarian } }
	}
	text = {
		localisation_key = string_austrian_mp_FR
		trigger = { OR = { primary_culture = austrian culture = austrian } }
	}
	text = {
		localisation_key = string_dutch_m_FR
		trigger = { OR = { primary_culture = dutch culture = dutch } }
	}
	text = {
		localisation_key = string_flemish_mp_FR
		trigger = { OR = { primary_culture = flemish culture = flemish } }
	}
	text = {
		localisation_key = string_swedish_m_FR
		trigger = { OR = { primary_culture = swedish culture = swedish } }
	}
	text = {
		localisation_key = string_danish_m_FR
		trigger = { OR = { primary_culture = danish culture = danish } }
	}
	text = {
		localisation_key = string_english_m_FR
		trigger = { OR = { primary_culture = english culture = english } }
	}
	text = {
		localisation_key = string_welsh_m_FR
		trigger = { OR = { primary_culture = welsh culture = welsh } }
	}
	text = {
		localisation_key = string_scottish_m_FR
		trigger = { OR = { primary_culture = scottish culture = scottish } }
	}
	text = {
		localisation_key = string_irish_m_FR
		trigger = { OR = { primary_culture = irish culture = irish } }
	}
	text = {
		localisation_key = string_highland_scottish_p_FR
		trigger = { OR = { primary_culture = highland_scottish culture = highland_scottish } }
	}
	text = {
		localisation_key = string_lombard_mp_FR
		trigger = { OR = { primary_culture = lombard culture = lombard } }
	}
	text = {
		localisation_key = string_tuscan_mp_FR
		trigger = { OR = { primary_culture = tuscan culture = tuscan } }
	}
	text = {
		localisation_key = string_sardinian_p_FR
		trigger = { OR = { primary_culture = sardinian culture = sardinian } }
	}
	text = {
		localisation_key = string_romagnan_mp_FR
		trigger = { OR = { primary_culture = romagnan culture = romagnan } }
	}
	text = {
		localisation_key = string_ligurian_p_FR
		trigger = { OR = { primary_culture = ligurian culture = ligurian } }
	}
	text = {
		localisation_key = string_venetian_mp_FR
		trigger = { OR = { primary_culture = venetian culture = venetian } }
	}
	text = {
		localisation_key = string_neapolitan_mp_FR
		trigger = { OR = { primary_culture = neapolitan culture = neapolitan } }
	}
	text = {
		localisation_key = string_piedmontese_m_FR
		trigger = { OR = { primary_culture = piedmontese culture = piedmontese } }
	}
	text = {
		localisation_key = string_umbrian_mp_FR
		trigger = { OR = { primary_culture = umbrian culture = umbrian } }
	}
	text = {
		localisation_key = string_sicilian_mp_FR
		trigger = { OR = { primary_culture = sicilian culture = sicilian } }
	}
	text = {
		localisation_key = string_maltese_m_FR
		trigger = { OR = { primary_culture = maltese culture = maltese } }
	}
	text = {
		localisation_key = string_castillian_mp_FR
		trigger = { OR = { primary_culture = castillian culture = castillian } }
	}
	text = {
		localisation_key = string_leonese_m_FR
		trigger = { OR = { primary_culture = leonese culture = leonese } }
	}
	text = {
		localisation_key = string_aragonese_m_FR
		trigger = { OR = { primary_culture = aragonese culture = aragonese } }
	}
	text = {
		localisation_key = string_catalan_mp_FR
		trigger = { OR = { primary_culture = catalan culture = catalan } }
	}
	text = {
		localisation_key = string_galician_mp_FR
		trigger = { OR = { primary_culture = galician culture = galician } }
	}
	text = {
		localisation_key = string_andalucian_mp_FR
		trigger = { OR = { primary_culture = andalucian culture = andalucian } }
	}
	text = {
		localisation_key = string_portugese_m_FR
		trigger = { OR = { primary_culture = portugese culture = portugese } }
	}
	text = {
		localisation_key = string_basque_p_FR
		trigger = { OR = { primary_culture = basque culture = basque } }
	}
	text = {
		localisation_key = string_cosmopolitan_french_m_FR
		trigger = { OR = { primary_culture = cosmopolitan_french culture = cosmopolitan_french } }
	}
	text = {
		localisation_key = string_gascon_mp_FR
		trigger = { OR = { primary_culture = gascon culture = gascon } }
	}
	text = {
		localisation_key = string_normand_mp_FR
		trigger = { OR = { primary_culture = normand culture = normand } }
	}
	text = {
		localisation_key = string_burgundian_mp_FR
		trigger = { OR = { primary_culture = burgundian culture = burgundian } }
	}
	text = {
		localisation_key = string_occitain_mp_FR
		trigger = { OR = { primary_culture = occitain culture = occitain } }
	}
	text = {
		localisation_key = string_wallonian_mp_FR
		trigger = { OR = { primary_culture = wallonian culture = wallonian } }
	}
	text = {
		localisation_key = string_breton_mp_FR
		trigger = { OR = { primary_culture = breton culture = breton } }
	}
	text = {
		localisation_key = string_croatian_p_FR
		trigger = { OR = { primary_culture = croatian culture = croatian } }
	}
	text = {
		localisation_key = string_serbian_p_FR
		trigger = { OR = { primary_culture = serbian culture = serbian } }
	}
	text = {
		localisation_key = string_bulgarian_p_FR
		trigger = { OR = { primary_culture = bulgarian culture = bulgarian } }
	}
	text = {
		localisation_key = string_albanian_m_FR
		trigger = { OR = { primary_culture = albanian culture = albanian } }
	}
	text = {
		localisation_key = string_czech_p_FR
		trigger = { OR = { primary_culture = czech culture = czech } }
	}
	text = {
		localisation_key = string_polish_m_FR
		trigger = { OR = { primary_culture = polish culture = polish } }
	}
	text = {
		localisation_key = string_schlesian_mp_FR
		trigger = { OR = { primary_culture = schlesian culture = schlesian } }
	}
	text = {
		localisation_key = string_slovak_p_FR
		trigger = { OR = { primary_culture = slovak culture = slovak } }
	}
	text = {
		localisation_key = string_transylvanian_mp_FR
		trigger = { OR = { primary_culture = transylvanian culture = transylvanian } }
	}
	text = {
		localisation_key = string_hungarian_m_FR
		trigger = { OR = { primary_culture = hungarian culture = hungarian } }
	}
	text = {
		localisation_key = string_russian_p_FR
		trigger = { OR = { primary_culture = russian culture = russian } }
	}
	text = {
		localisation_key = string_byelorussian_p_FR
		trigger = { OR = { primary_culture = byelorussian culture = byelorussian } }
	}
	text = {
		localisation_key = string_ruthenian_p_FR
		trigger = { OR = { primary_culture = ruthenian culture = ruthenian } }
	}
	text = {
		localisation_key = string_lithuanian_mp_FR
		trigger = { OR = { primary_culture = lithuanian culture = lithuanian } }
	}
	text = {
		localisation_key = string_latvian_mp_FR
		trigger = { OR = { primary_culture = latvian culture = latvian } }
	}
	text = {
		localisation_key = string_greek_mp_FR
		trigger = { OR = { primary_culture = greek culture = greek } }
	}
	text = {
		localisation_key = string_turkish_mp_FR
		trigger = { OR = { primary_culture = turkish culture = turkish } }
	}
	text = {
		localisation_key = string_moroccan_mp_FR
		trigger = { OR = { primary_culture = moroccan culture = moroccan } }
	}
	text = {
		localisation_key = string_tunisian_mp_FR
		trigger = { OR = { primary_culture = tunisian culture = tunisian } }
	}
	text = {
		localisation_key = string_algerian_mp_FR
		trigger = { OR = { primary_culture = algerian culture = algerian } }
	}
	text = {
		localisation_key = string_berber_p_FR
		trigger = { OR = { primary_culture = berber culture = berber } }
	}
	text = {
		localisation_key = string_roman_mp_FR
		trigger = { OR = { primary_culture = roman culture = roman } }
	}
	text = {
		localisation_key = string_jan_mayenese_mp_FR
		trigger = { OR = { primary_culture = jan_mayenese culture = jan_mayenese } }
	}
	text = {
		localisation_key = string_pruthenian_p_FR
		trigger = { OR = { primary_culture = pruthenian culture = pruthenian } }
	}
	text = {
		localisation_key = string_anglosaxon_mp_FR
		trigger = { OR = { primary_culture = anglosaxon culture = anglosaxon } }
	}
}						
						
						
### Ex: "[Turkish]" => "[turques]" (plural feminine / féminin pluriel)						
defined_text = {						
	name = GetCultFP					
	text = {
		localisation_key = string_pommeranian_fp_FR
		trigger = { OR = { primary_culture = pommeranian culture = pommeranian } }
	}
	text = {
		localisation_key = string_prussian_fp_FR
		trigger = { OR = { primary_culture = prussian culture = prussian } }
	}
	text = {
		localisation_key = string_hannoverian_fp_FR
		trigger = { OR = { primary_culture = hannoverian culture = hannoverian } }
	}
	text = {
		localisation_key = string_hessian_fp_FR
		trigger = { OR = { primary_culture = hessian culture = hessian } }
	}
	text = {
		localisation_key = string_saxon_fp_FR
		trigger = { OR = { primary_culture = saxon culture = saxon } }
	}
	text = {
		localisation_key = string_franconian_fp_FR
		trigger = { OR = { primary_culture = franconian culture = franconian } }
	}
	text = {
		localisation_key = string_swabian_p_FR
		trigger = { OR = { primary_culture = swabian culture = swabian } }
	}
	text = {
		localisation_key = string_swiss_p_FR
		trigger = { OR = { primary_culture = swiss culture = swiss } }
	}
	text = {
		localisation_key = string_bavarian_fp_FR
		trigger = { OR = { primary_culture = bavarian culture = bavarian } }
	}
	text = {
		localisation_key = string_austrian_fp_FR
		trigger = { OR = { primary_culture = austrian culture = austrian } }
	}
	text = {
		localisation_key = string_dutch_fp_FR
		trigger = { OR = { primary_culture = dutch culture = dutch } }
	}
	text = {
		localisation_key = string_flemish_fp_FR
		trigger = { OR = { primary_culture = flemish culture = flemish } }
	}
	text = {
		localisation_key = string_swedish_fp_FR
		trigger = { OR = { primary_culture = swedish culture = swedish } }
	}
	text = {
		localisation_key = string_danish_fp_FR
		trigger = { OR = { primary_culture = danish culture = danish } }
	}
	text = {
		localisation_key = string_english_fp_FR
		trigger = { OR = { primary_culture = english culture = english } }
	}
	text = {
		localisation_key = string_welsh_fp_FR
		trigger = { OR = { primary_culture = welsh culture = welsh } }
	}
	text = {
		localisation_key = string_scottish_fp_FR
		trigger = { OR = { primary_culture = scottish culture = scottish } }
	}
	text = {
		localisation_key = string_irish_fp_FR
		trigger = { OR = { primary_culture = irish culture = irish } }
	}
	text = {
		localisation_key = string_highland_scottish_p_FR
		trigger = { OR = { primary_culture = highland_scottish culture = highland_scottish } }
	}
	text = {
		localisation_key = string_lombard_fp_FR
		trigger = { OR = { primary_culture = lombard culture = lombard } }
	}
	text = {
		localisation_key = string_tuscan_fp_FR
		trigger = { OR = { primary_culture = tuscan culture = tuscan } }
	}
	text = {
		localisation_key = string_sardinian_p_FR
		trigger = { OR = { primary_culture = sardinian culture = sardinian } }
	}
	text = {
		localisation_key = string_romagnan_fp_FR
		trigger = { OR = { primary_culture = romagnan culture = romagnan } }
	}
	text = {
		localisation_key = string_ligurian_p_FR
		trigger = { OR = { primary_culture = ligurian culture = ligurian } }
	}
	text = {
		localisation_key = string_venetian_fp_FR
		trigger = { OR = { primary_culture = venetian culture = venetian } }
	}
	text = {
		localisation_key = string_neapolitan_fp_FR
		trigger = { OR = { primary_culture = neapolitan culture = neapolitan } }
	}
	text = {
		localisation_key = string_piedmontese_fp_FR
		trigger = { OR = { primary_culture = piedmontese culture = piedmontese } }
	}
	text = {
		localisation_key = string_umbrian_fp_FR
		trigger = { OR = { primary_culture = umbrian culture = umbrian } }
	}
	text = {
		localisation_key = string_sicilian_fp_FR
		trigger = { OR = { primary_culture = sicilian culture = sicilian } }
	}
	text = {
		localisation_key = string_maltese_fp_FR
		trigger = { OR = { primary_culture = maltese culture = maltese } }
	}
	text = {
		localisation_key = string_castillian_fp_FR
		trigger = { OR = { primary_culture = castillian culture = castillian } }
	}
	text = {
		localisation_key = string_leonese_fp_FR
		trigger = { OR = { primary_culture = leonese culture = leonese } }
	}
	text = {
		localisation_key = string_aragonese_fp_FR
		trigger = { OR = { primary_culture = aragonese culture = aragonese } }
	}
	text = {
		localisation_key = string_catalan_fp_FR
		trigger = { OR = { primary_culture = catalan culture = catalan } }
	}
	text = {
		localisation_key = string_galician_fp_FR
		trigger = { OR = { primary_culture = galician culture = galician } }
	}
	text = {
		localisation_key = string_andalucian_fp_FR
		trigger = { OR = { primary_culture = andalucian culture = andalucian } }
	}
	text = {
		localisation_key = string_portugese_fp_FR
		trigger = { OR = { primary_culture = portugese culture = portugese } }
	}
	text = {
		localisation_key = string_basque_p_FR
		trigger = { OR = { primary_culture = basque culture = basque } }
	}
	text = {
		localisation_key = string_cosmopolitan_french_fp_FR
		trigger = { OR = { primary_culture = cosmopolitan_french culture = cosmopolitan_french } }
	}
	text = {
		localisation_key = string_gascon_fp_FR
		trigger = { OR = { primary_culture = gascon culture = gascon } }
	}
	text = {
		localisation_key = string_normand_fp_FR
		trigger = { OR = { primary_culture = normand culture = normand } }
	}
	text = {
		localisation_key = string_burgundian_fp_FR
		trigger = { OR = { primary_culture = burgundian culture = burgundian } }
	}
	text = {
		localisation_key = string_occitain_fp_FR
		trigger = { OR = { primary_culture = occitain culture = occitain } }
	}
	text = {
		localisation_key = string_wallonian_fp_FR
		trigger = { OR = { primary_culture = wallonian culture = wallonian } }
	}
	text = {
		localisation_key = string_breton_fp_FR
		trigger = { OR = { primary_culture = breton culture = breton } }
	}
	text = {
		localisation_key = string_croatian_p_FR
		trigger = { OR = { primary_culture = croatian culture = croatian } }
	}
	text = {
		localisation_key = string_serbian_p_FR
		trigger = { OR = { primary_culture = serbian culture = serbian } }
	}
	text = {
		localisation_key = string_bulgarian_p_FR
		trigger = { OR = { primary_culture = bulgarian culture = bulgarian } }
	}
	text = {
		localisation_key = string_albanian_fp_FR
		trigger = { OR = { primary_culture = albanian culture = albanian } }
	}
	text = {
		localisation_key = string_czech_p_FR
		trigger = { OR = { primary_culture = czech culture = czech } }
	}
	text = {
		localisation_key = string_polish_fp_FR
		trigger = { OR = { primary_culture = polish culture = polish } }
	}
	text = {
		localisation_key = string_schlesian_fp_FR
		trigger = { OR = { primary_culture = schlesian culture = schlesian } }
	}
	text = {
		localisation_key = string_slovak_p_FR
		trigger = { OR = { primary_culture = slovak culture = slovak } }
	}
	text = {
		localisation_key = string_transylvanian_fp_FR
		trigger = { OR = { primary_culture = transylvanian culture = transylvanian } }
	}
	text = {
		localisation_key = string_hungarian_fp_FR
		trigger = { OR = { primary_culture = hungarian culture = hungarian } }
	}
	text = {
		localisation_key = string_russian_p_FR
		trigger = { OR = { primary_culture = russian culture = russian } }
	}
	text = {
		localisation_key = string_byelorussian_p_FR
		trigger = { OR = { primary_culture = byelorussian culture = byelorussian } }
	}
	text = {
		localisation_key = string_ruthenian_p_FR
		trigger = { OR = { primary_culture = ruthenian culture = ruthenian } }
	}
	text = {
		localisation_key = string_lithuanian_fp_FR
		trigger = { OR = { primary_culture = lithuanian culture = lithuanian } }
	}
	text = {
		localisation_key = string_latvian_fp_FR
		trigger = { OR = { primary_culture = latvian culture = latvian } }
	}
	text = {
		localisation_key = string_greek_fp_FR
		trigger = { OR = { primary_culture = greek culture = greek } }
	}
	text = {
		localisation_key = string_turkish_fp_FR
		trigger = { OR = { primary_culture = turkish culture = turkish } }
	}
	text = {
		localisation_key = string_moroccan_fp_FR
		trigger = { OR = { primary_culture = moroccan culture = moroccan } }
	}
	text = {
		localisation_key = string_tunisian_fp_FR
		trigger = { OR = { primary_culture = tunisian culture = tunisian } }
	}
	text = {
		localisation_key = string_algerian_fp_FR
		trigger = { OR = { primary_culture = algerian culture = algerian } }
	}
	text = {
		localisation_key = string_berber_p_FR
		trigger = { OR = { primary_culture = berber culture = berber } }
	}
	text = {
		localisation_key = string_roman_fp_FR
		trigger = { OR = { primary_culture = roman culture = roman } }
	}
	text = {
		localisation_key = string_jan_mayenese_fp_FR
		trigger = { OR = { primary_culture = jan_mayenese culture = jan_mayenese } }
	}
	text = {
		localisation_key = string_pruthenian_p_FR
		trigger = { OR = { primary_culture = pruthenian culture = pruthenian } }
	}
	text = {
		localisation_key = string_anglosaxon_fp_FR
		trigger = { OR = { primary_culture = anglosaxon culture = anglosaxon } }
	}
}						

#############################
###   Estates // Ordres   ###
#############################

# Ex: "[Clergy]" => "les [clercs]" (lower case / minuscule)
defined_text = {
	name = GetClercs
	text = {
		localisation_key = string_church_FR
		trigger = {
			has_estate = estate_church
			NOT = {
				religion_group = muslim
			}
		}
	}
	text = {
		localisation_key = string_ulema_FR
		trigger = {
			has_estate = estate_church
			religion_group = muslim
		}
	}
}

# Ex: "[Nobility]" => "les [nobles]" (lower case / minuscule)
defined_text = {
	name = GetNobles
	text = {
		localisation_key = string_nobles_FR
		trigger = {
			has_estate = estate_nobles
			NOT = {
				technology_group = ottoman
				culture_group = east_slavic
				culture_group = vlach
				primary_culture = bulgarian
				primary_culture = polish
				primary_culture = lithuanian
				religion_group = muslim
			}
		}
	}
	text = {
		localisation_key = string_beys_FR
		trigger = {
			has_estate = estate_nobles
			technology_group = ottoman
		}
	}
	text = {
		localisation_key = string_boyars_FR
		trigger = {
			has_estate = estate_nobles
			OR = {
				culture_group = east_slavic
				primary_culture = bulgarian
				culture_group = vlach
			}
		}
	}
	text = {
		localisation_key = string_szlachta_FR
		trigger = {
			has_estate = estate_nobles
			OR = {
				primary_culture = polish
				primary_culture = lithuanian
			}
		}
	}
	text = {
		localisation_key = string_amirs_FR
		trigger = {
			has_estate = estate_nobles
			religion_group = muslim
			NOT = { technology_group = ottoman }
		}
	}
}

# Ex: "[Burghers]" => "les [bourgeois]" (lower case / minuscule)
defined_text = {
	name = GetBourgeois
	text = {
		localisation_key = string_burghers_FR
		trigger = {
			has_estate = estate_burghers
			NOT = {
				culture_group = french
			}
		}
	}
	text = {
		localisation_key = string_bourgeoisie_FR
		trigger = {
			has_estate = estate_burghers
			culture_group = french
		}
	}
	text = {
		localisation_key = string_merchant_guilds_FR
		trigger = {
			has_estate = estate_burghers
			NOT = { religion_group = christian }
		}
	}
}

# Ex: "[Tribes]" => "les [tribus]" (lower case / minuscule)
defined_text = {
	name = GetTribus
	text = {
		localisation_key = string_nomadic_tribes_FR
		trigger = {
			has_estate = estate_nomadic_tribes
		}
	}
}

# Ex: "[Cossacks]" => "les [cosaques]" (lower case / minuscule)
defined_text = {
	name = GetDhimmi
	text = {
		localisation_key = string_dhimmi_FR
		trigger = {
			has_estate = estate_dhimmi
		}
	}
}



###########################################
###   Trade Goods // Bien commerciaux   ###
###########################################

### Ex: "wine" => "le [vin]" (lower case / minuscule)
defined_text = {
	name = GetBC
	text = {
		localisation_key = string_wine_FR
		trigger = { trade_goods = wine }
	}
	text = {
		localisation_key = string_fish_FR
		trigger = { trade_goods = fish }
	}
	text = {
		localisation_key = string_salt_FR
		trigger = { trade_goods = salt }
	}
	text = {
		localisation_key = string_copper_FR
		trigger = { trade_goods = copper }
	}
	text = {
		localisation_key = string_iron_FR
		trigger = { trade_goods = iron }
	}
	text = {
		localisation_key = string_sugar_FR
		trigger = { trade_goods = sugar }
	}
	text = {
		localisation_key = string_wool_FR
		trigger = { trade_goods = wool }
	}
	text = {
		localisation_key = string_silk_FR
		trigger = { trade_goods = silk }
	}
	text = {
		localisation_key = string_gold_FR
		trigger = { trade_goods = gold }
	}
	text = {
		localisation_key = string_ivory_FR
		trigger = { trade_goods = ivory }
	}
	text = {
		localisation_key = string_slaves_FR
		trigger = { trade_goods = slaves }
	}
	text = {
		localisation_key = string_grain_FR
		trigger = { trade_goods = grain }
	}
	text = {
		localisation_key = string_fur_FR
		trigger = { trade_goods = fur }
	}
	text = {
		localisation_key = string_naval_supplies_FR
		trigger = { trade_goods = naval_supplies }
	}
	text = {
		localisation_key = string_chinaware_FR
		trigger = { trade_goods = chinaware }
	}
}



### Ex: "sell [the] wine/wool/gold/slaves" => "vendre [le] vin/[la] laine/[l']or/[les] esclaves" (lower case / minuscule)
defined_text = {
	name = GetLeLaBC
	text = {
		localisation_key = string_le_FR
		trigger = {
			OR = {
				trade_goods = wine
				trade_goods = fish
				trade_goods = salt
				trade_goods = copper
				trade_goods = iron
				trade_goods = sugar
			}
		}
	}
	text = {
		localisation_key = string_la_FR
		trigger = {
			OR = {
				trade_goods = wool
				trade_goods = silk
			}
		}
	}
	text = {
		localisation_key = string_l_FR
		trigger = {
			OR = {
				trade_goods = gold
				trade_goods = ivory
			}
		}
	}
	text = {
		localisation_key = string_les_FR
		trigger = {
			OR = {
				trade_goods = slaves
				trade_goods = grain
				trade_goods = fur
				trade_goods = naval_supplies
				trade_goods = chinaware
			}
		}
	}
}
### Ex: "Wine/Wool/Gold/Slaves is/are sold" => "[Le] vin/[La] laine/[L']or/[Les] esclaves est/sont vendu(e)(s)" (upper case / majuscule)
defined_text = {
	name = GetLeLaBCCap
	text = {
		localisation_key = string_le_cap_FR
		trigger = {
			OR = {
				trade_goods = wine
				trade_goods = fish
				trade_goods = salt
				trade_goods = copper
				trade_goods = iron
				trade_goods = sugar
			}
		}
	}
	text = {
		localisation_key = string_la_cap_FR
		trigger = {
			OR = {
				trade_goods = wool
				trade_goods = silk
			}
		}
	}
	text = {
		localisation_key = string_l_cap_FR
		trigger = {
			OR = {
				trade_goods = gold
				trade_goods = ivory
			}
		}
	}
	text = {
		localisation_key = string_les_cap_FR
		trigger = {
			OR = {
				trade_goods = slaves
				trade_goods = grain
				trade_goods = fur
				trade_goods = naval_supplies
				trade_goods = chinaware
			}
		}
	}
}



### Ex: "the trade [of] wine/wool/gold/slaves" => "le commerce [du] vin/[de la] laine/[de l']or/[des] esclaves" (lower case / minuscule)
defined_text = {
	name = GetDuDelaBC
	text = {
		localisation_key = string_du_FR
		trigger = {
			OR = {
				trade_goods = wine
				trade_goods = fish
				trade_goods = salt
				trade_goods = copper
				trade_goods = iron
				trade_goods = sugar
			}
		}
	}
	text = {
		localisation_key = string_dela_FR
		trigger = {
			OR = {
				trade_goods = wool
				trade_goods = silk
			}
		}
	}
	text = {
		localisation_key = string_del_FR
		trigger = {
			OR = {
				trade_goods = gold
				trade_goods = ivory
			}
		}
	}
	text = {
		localisation_key = string_des_FR
		trigger = {
			OR = {
				trade_goods = slaves
				trade_goods = grain
				trade_goods = fur
				trade_goods = naval_supplies
				trade_goods = chinaware
			}
		}
	}
}
### Ex: "[Some] wine/wool/gold/slaves is/are sold" => "[Du] vin/[De la] laine/[De l']or/[Des] esclaves est/sont vendus" (upper case / majuscule)
defined_text = {
	name = GetDuDelaBCCap
	text = {
		localisation_key = string_du_cap_FR
		trigger = {
			OR = {
				trade_goods = wine
				trade_goods = fish
				trade_goods = salt
				trade_goods = copper
				trade_goods = iron
				trade_goods = sugar
			}
		}
	}
	text = {
		localisation_key = string_dela_cap_FR
		trigger = {
			OR = {
				trade_goods = wool
				trade_goods = silk
			}
		}
	}
	text = {
		localisation_key = string_del_cap_FR
		trigger = {
			OR = {
				trade_goods = gold
				trade_goods = ivory
			}
		}
	}
	text = {
		localisation_key = string_des_cap_FR
		trigger = {
			OR = {
				trade_goods = slaves
				trade_goods = grain
				trade_goods = fur
				trade_goods = naval_supplies
				trade_goods = chinaware
			}
		}
	}
}



### Ex: "make do with wine/wool/gold/slaves" => "vivre [de] vin/[d']or" (lower case / minuscule)
defined_text = {
	name = GetDeDBC
	text = {
		localisation_key = string_de_FR
		trigger = {
			OR = {
				trade_goods = wine
				trade_goods = fish
				trade_goods = salt
				trade_goods = copper
				trade_goods = iron
				trade_goods = sugar
				trade_goods = wool
				trade_goods = silk
				trade_goods = grain
				trade_goods = fur
				trade_goods = naval_supplies
				trade_goods = chinaware
			}
		}
	}
	text = {
		localisation_key = string_d_FR
		trigger = {
			OR = {
				trade_goods = gold
				trade_goods = ivory
				trade_goods = slaves
			}
		}
	}
}
### Ex: "make do with wine/wool/gold/slaves" => "[De] vin/[D']or" (upper case / majuscule)
defined_text = {
	name = GetDeDBCCap
	text = {
		localisation_key = string_de_cap_FR
		trigger = {
			OR = {
				trade_goods = wine
				trade_goods = fish
				trade_goods = salt
				trade_goods = copper
				trade_goods = iron
				trade_goods = sugar
				trade_goods = wool
				trade_goods = silk
				trade_goods = grain
				trade_goods = fur
				trade_goods = naval_supplies
				trade_goods = chinaware
			}
		}
	}
	text = {
		localisation_key = string_d_cap_FR
		trigger = {
			OR = {
				trade_goods = gold
				trade_goods = ivory
				trade_goods = slaves
			}
		}
	}
}
